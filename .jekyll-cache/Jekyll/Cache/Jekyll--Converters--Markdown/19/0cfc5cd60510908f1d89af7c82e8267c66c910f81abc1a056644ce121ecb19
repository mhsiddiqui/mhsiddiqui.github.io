I"ª4<p>In part 1 of this series, we setup a Django server using uWSGI/Gunicorn and Nginx. In that part, all the steps of dependencies installation and configurations are performed one by one. The server we setup is very basic server having just application server. The database we used is Sqlite3 database. In real application, we will have PostgreSQL or MySQL which are more advance databases. Beside database and application server, we can have Celery workers or Celery Beat. For this type of servers, performing all steps one by one will be very hectic and time taking. So it is good to automate all this process using Fabric which is a high level Python (2.7, 3.4+) library designed to execute shell commands remotely over SSH, yielding useful Python objects in return. For further details, see <a href="http://www.fabfile.org">Fabric documentation</a>.</p>

<!--more-->

<p>Before we start writing fabric script, we first need to identify steps which we will be performing in order to setup a new machine and to deploy new version on server.</p>

<p><strong>For Fresh Setup</strong></p>

<ol>
  <li>Clone latest code</li>
  <li>Install required packages</li>
  <li>Setup database</li>
  <li>Requirement installation</li>
  <li>Migrate</li>
  <li>Collectstatic</li>
  <li>Configure supervisor</li>
  <li>Configure Nginx</li>
</ol>

<p><strong>For Deploying new version</strong></p>

<ol>
  <li>Pull latest code from git repository</li>
  <li>Requirement installation</li>
  <li>Migrate</li>
  <li>Collectstatic</li>
  <li>Restart supervisor</li>
</ol>

<h1 id="fabfile-functions">Fabfile Functions</h1>

<p>Below we will be writing each functions which will be used in all above steps.</p>

<h2 id="install-required-packages">Install required packages</h2>
<p>As we are setting up our server on Ubuntu, we will write commands according to Ubuuntu.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PACKAGE_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="s">'git'</span><span class="p">,</span> <span class="s">'supervisor'</span><span class="p">,</span> <span class="s">'postgresql'</span><span class="p">,</span> <span class="s">'python-pip'</span><span class="p">,</span> <span class="s">'nginx'</span><span class="p">]</span> <span class="c1">#add all required packages in this list
</span>
<span class="k">def</span> <span class="nf">install_package</span><span class="p">():</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'apt-get update'</span><span class="p">)</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'apt-get install </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="p">(</span><span class="s">' '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">PACKAGE_LIST</span><span class="p">)))</span>
</code></pre></div></div>

<h2 id="setup-database">Setup database</h2>
<p>We will be setting up Postgresql database for this server. Below is the code to setup a Postgresql database.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DB_USER</span> <span class="o">=</span> <span class="s">"db_user"</span> <span class="c1">#define your user here
</span><span class="n">DB_PASS</span> <span class="o">=</span> <span class="s">"db_pass"</span> <span class="c1">#define your password here
</span><span class="n">DB_NAME</span> <span class="o">=</span> <span class="s">"db_name"</span> <span class="c1">#define your database name here
</span>
<span class="k">def</span> <span class="nf">setup_database</span><span class="p">():</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'psql -c "CREATE USER </span><span class="si">%</span><span class="s">s WITH NOCREATEDB NOCREATEUSER " </span><span class="se">\
</span><span class="s">         "ENCRYPTED PASSWORD E</span><span class="se">\'</span><span class="si">%</span><span class="s">s</span><span class="se">\'</span><span class="s">"'</span> <span class="o">%</span> <span class="p">(</span><span class="n">DB_USER</span><span class="p">,</span> <span class="n">DB_PASS</span><span class="p">),</span> <span class="n">user</span><span class="o">=</span><span class="s">'postgres'</span><span class="p">)</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'psql -c "CREATE DATABASE </span><span class="si">%</span><span class="s">s WITH OWNER </span><span class="si">%</span><span class="s">s"'</span> <span class="o">%</span> <span class="p">(</span>
         <span class="n">DB_NAME</span><span class="p">,</span> <span class="n">DB_USER</span><span class="p">),</span> <span class="n">user</span><span class="o">=</span><span class="s">'postgres'</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="pull-latest-code-from-git-repository">Pull latest code from git repository</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">update_code</span><span class="p">():</span>
    <span class="n">branch</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">"git symbolic-ref --short -q HEAD"</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">local</span><span class="p">(</span><span class="s">'git pull origin </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="n">branch</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="requirement-installation">Requirement installation</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">install_requirements</span><span class="p">():</span>
    <span class="n">local</span><span class="p">(</span><span class="s">'pip install -r requirements.txt'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="migrate">Migrate</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">migrate</span><span class="p">():</span>
    <span class="n">local</span><span class="p">(</span><span class="s">'python manage.py migrate'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="collectstatic">Collectstatic</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">collectstatic</span><span class="p">():</span>
    <span class="n">local</span><span class="p">(</span><span class="s">'python manage.py collectstatic'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="configure-supervisor">Configure supervisor</h2>
<p>We will be using supervisor for running following services.</p>
<ul>
  <li>uWSGI/Gunicorn server</li>
  <li>Celery worker</li>
  <li>Celery beat</li>
</ul>

<p>We have seen in <a href="/2018/12/18/Part%201:%20Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Basic-Setup/">Part 1</a> and <a href="/2018/12/25/Part-2-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Celery-Setup/">Part 2</a> how to write supervisor configuration file for all above services. Create a file <code class="highlighter-rouge">supervisor.conf</code> and add below configurations in it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>;; Add one of the above uWSGI/Gunicorm
;; For gunicorn
[program:myproject_server]
numprocs=1
command=gunicorn --bind 0.0.0.0:8000 myproject.wsgi
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
stopsignal=QUIT
stopasgroup=true
killasgroup=true
priority=999

;For uWSGI
[program:myproject_server]
numprocs=1
command=uwsgi --http :8000 --module myproject.wsgi
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
stopsignal=QUIT
stopasgroup=true
killasgroup=true
priority=999

;;For Celery Worker**
[program:celery_worker]
numprocs=1
command=celery -A myproject worker -l info
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
stopsignal=QUIT
stopasgroup=true
killasgroup=true
priority=1000

;;For Celery Beat**
[program:celery_beat]
numprocs=1
command=celery -A myproject worker -l info
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
stopsignal=QUIT
stopasgroup=true
killasgroup=true
priority=1001
</code></pre></div></div>

<p>Below is the code to setup your supervisor.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">configure_supervisor</span><span class="p">():</span>
    <span class="n">local</span><span class="p">(</span><span class="s">'supervisord -c supervisor.conf'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="configure-nginx">Configure Nginx</h2>

<p>Create a file <code class="highlighter-rouge">nginx.conf</code> in your project and add following configuration in it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    listen 80;
    server_name server_domain_or_IP;

    location / {
        include proxy_params;
        proxy_pass http://127.0.0.1:8000;
    }
}
</code></pre></div></div>

<p>Below is code to setup nginx</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">configure_nginx</span><span class="p">():</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'ln -s nginx.conf /etc/nginx/sites-enabled/myproject.conf'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="restart-supervisor">Restart supervisor</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">restart_supervisor</span><span class="p">():</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'supervisorctl restart myproject_server'</span><span class="p">)</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'supervisorctl restart celery_worker'</span><span class="p">)</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'supervisorctl restart celery_beat'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="restart-nginx">Restart Nginx</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">restart_nginx</span><span class="p">():</span>
    <span class="n">sudo</span><span class="p">(</span><span class="s">'systemctl restart nginx'</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="for-fresh-setup">For Fresh Setup</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">task</span>
<span class="k">def</span> <span class="nf">setup</span><span class="p">():</span>
    <span class="n">install_package</span><span class="p">()</span>
    <span class="n">setup_database</span><span class="p">()</span>
    <span class="n">install_requirements</span><span class="p">()</span>
    <span class="n">migrate</span><span class="p">()</span>
    <span class="n">collectstatic</span><span class="p">()</span>
    <span class="n">configure_supervisor</span><span class="p">()</span>
    <span class="n">configure_nginx</span><span class="p">()</span>
    <span class="n">restart_supervisor</span><span class="p">()</span>
    <span class="n">restart_nginx</span><span class="p">()</span>
</code></pre></div></div>

<p>Run below command to setup your new server.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>fab setup
</code></pre></div></div>

<h1 id="for-deploying-new-version">For Deploying new version</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">task</span>
<span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
    <span class="n">update_code</span><span class="p">()</span>
    <span class="n">install_requirements</span><span class="p">()</span>
    <span class="n">migrate</span><span class="p">()</span>
    <span class="n">collectstatic</span><span class="p">()</span>
    <span class="n">restart_supervisor</span><span class="p">()</span>
</code></pre></div></div>

<p>Run below command to setup your new server.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>fab deploy
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>In this article, we wrote a fabric script in order to automate setup and deployment process. We divided our whole process in small steps and automated each step. By combining all these steps in required order, we automated whole proces. This can be extend to handle very complex server. Complete <code class="highlighter-rouge">fabfile</code> can be seen <a href="https://gist.github.com/mhsiddiqui/dd129b03bd780c8dadb4b09005fb76ca">here</a>.</p>

:ET