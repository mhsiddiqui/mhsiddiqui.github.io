I"­1<p>Django is a python based framework that was developed to help developer to take applications from idea to fulfillment as fast as could reasonably be expected. Django incorporates a streamlined development server for testing your code locally. But for production purpose, a more advance and secure server is required. This article will help you to setup basic server of your Django based application. We will be setting up Django server on Ubuntu 18.04 for this article.</p>

<!--more-->

<h2 id="initial-setup">Initial setup</h2>

<p>For setting up server on Ubuntu, you need to install some packages which are listed below.</p>

<ol>
  <li>Pip</li>
  <li>Python-dev</li>
  <li>Nginx</li>
</ol>

<p>To install these packages, run below commands.</p>

<p><strong>For Python-2.x</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python-pip python-dev libpq-dev nginx
</code></pre></div></div>

<p><strong>For Python-3.x</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3-pip python3-dev libpq-dev nginx
</code></pre></div></div>

<p>These commands will install all required packages in your server and you will be ready to start your server setup.</p>

<h2 id="setup-a-python-virtual-environment">Setup a Python Virtual Environment</h2>

<p>For setting up a Django application, we will have to setup a virtual environment. To do this, we first need access to the <code class="highlighter-rouge">virtualenv</code> command. We can install this with pip.</p>

<p><strong>For Python-2.x</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-H</span> pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
<span class="nb">sudo</span> <span class="nt">-H</span> pip <span class="nb">install </span>virtualenv
</code></pre></div></div>
<p><strong>For Python-3.x</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-H</span> pip3 <span class="nb">install</span> <span class="nt">--upgrade</span> pip
<span class="nb">sudo</span> <span class="nt">-H</span> pip3 <span class="nb">install </span>virtualenv
</code></pre></div></div>

<p>Now you can create a virtual environment by using below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>myproject
virtualenv venv
</code></pre></div></div>

<p>Now activate your virtual environment by running below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>venv/bin/activate
</code></pre></div></div>

<p>Now install Django in this environment.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>Django
</code></pre></div></div>

<h2 id="setup-a-django-application">Setup a Django Application</h2>

<p>Since we have setup a virtual environment and installed Django in it, we can create our basic Django application. Run below command to create a basic Django application.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin startproject myproject ~/myproject
</code></pre></div></div>

<p>This will create a django application in you current directory. You can run your application like by running below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver
</code></pre></div></div>

<p>Your app will be accessible on http://127.0.0.1:8000.</p>

<h2 id="setup-gunicornuwsgi">Setup Gunicorn/uWSGI</h2>

<p>The server we run in previous step through <code class="highlighter-rouge">manage.py</code> command is only mean for development purpose. For production environment, you need to use other servers like Gunicorn or uWSGI. For doing this, we first need to install these packages.</p>

<p><strong>For Gunicorn</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>gunicorn
</code></pre></div></div>

<p><strong>For uWSGI</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>uwsgi
</code></pre></div></div>

<p>After installation of server of your choice, you need to test ability of that server to run your application. In your project directory, run following command.</p>

<p><strong>For Gunicorn</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gunicorn <span class="nt">--bind</span> 0.0.0.0:8000 myproject.wsgi
</code></pre></div></div>

<p><strong>For uWSGI</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uwsgi <span class="nt">--http</span> :8000 <span class="nt">--module</span> myproject.wsgi
</code></pre></div></div>

<p><code class="highlighter-rouge">myproject.wsgi</code> in both commands refers to the <code class="highlighter-rouge">wsgi.py</code> file in your project directory (with settings.py). Your app will be accessible on http://127.0.0.1:8000.</p>

<h2 id="setup-gunicornuwsgi-service">Setup Gunicorn/uWSGI Service</h2>

<p>In previous step, we verified that our application is running correctly with Gunicorn/uWSGI. In this step, we will create a service for these server so that it keeps on running as daemon on our server. To do this, we will be using <a href="http://supervisord.org/index.html"><code class="highlighter-rouge">supervisor</code></a>. To install <code class="highlighter-rouge">supervisor</code>, run following command in your virtual environment.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>supervisor
</code></pre></div></div>

<p>To create a supervisor service, you need to create a supervisor configuration file for your project. To create one for your project, run following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo_supervisord_conf <span class="o">&gt;</span> supervisord.conf
</code></pre></div></div>

<p>This will create a sample supervisor configuration file which you can modify for your project. For our project, add one of the following according to choice of your server in your configuration file.</p>

<p><strong>For Gunicorn</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[program:myproject_server]
numprocs=1
command=gunicorn --bind 0.0.0.0:8000 myproject.wsgi
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
stopsignal=QUIT
stopasgroup=true
killasgroup=true
priority=999
</code></pre></div></div>

<p><strong>For uWSGI</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[program:myproject_server]
numprocs=1
command=uwsgi --http :8000 --module myproject.wsgi
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
stopsignal=QUIT
stopasgroup=true
killasgroup=true
priority=999
</code></pre></div></div>

<p>In above configuration, you need exact path of <code class="highlighter-rouge">gunicorn</code> or <code class="highlighter-rouge">uwsgi</code> executable. If both packages are installed in virtual environment as in our case, we need to mention its path like <code class="highlighter-rouge">venv/bin/gunicorn</code> or <code class="highlighter-rouge">venv/bin/uwsgi</code>. Once you have added above configuration in <code class="highlighter-rouge">supervisord.conf</code> file, now you can start supervisor by running below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>supervisord
</code></pre></div></div>

<p>For running server on startup.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>supervisord.conf <span class="o">&gt;</span> /etc/supervisord.conf
</code></pre></div></div>

<p>This will start a supervisor service with name <code class="highlighter-rouge">myproject_server</code>. Your can access tour server on http://127.0.0.1:8000. If you made some changes in supervisor configuration file, run following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>supervisorctl reread
</code></pre></div></div>

<p>If you made changes in your project code, run following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>supervisorctl restart myproject_server
</code></pre></div></div>

<h2 id="configure-nginx">Configure Nginx</h2>

<p>After setting up Gunicorn/uWSGI, we need to setup Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginxâ€™s sites-available directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nginx/sites-available/myproject
</code></pre></div></div>

<p>Add following code in your Nginx configuration file (/etc/nginx/sites-available/myproject).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    listen 80;
    server_name server_domain_or_IP;

    location / {
        include proxy_params;
        proxy_pass http://127.0.0.1:8000;
    }
}
</code></pre></div></div>

<p>Save and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
</code></pre></div></div>

<p>Test your Nginx configuration for syntax errors by typing below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nginx <span class="nt">-t</span>
</code></pre></div></div>

<p>If no errors are reported, restart Nginx by running below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart nginx
</code></pre></div></div>

<p>Your application will be available on http://127.0.0.1 or http://server_domain_or_IP.</p>

<h2 id="deploying-new-version">Deploying New Version</h2>
<p>For any deployment system, the process of deployment of new version is very important. For a good deployment process, this process should be as easy as possible. For deployment of a new version of your project for deployment system described in this article, following steps are required.</p>

<ol>
  <li>Get latest code from your git repository.</li>
  <li>Run database migrations by running <code class="highlighter-rouge">python manage.py migrate</code></li>
  <li>Collect static files from multiple apps into a single path by running <code class="highlighter-rouge">python manage.py collectstatic</code></li>
  <li>Restart supervisor service by running <code class="highlighter-rouge">sudo supervisorctl restart myproject_server</code></li>
</ol>

<p>These steps are only applicable if you have changes in your Django application. If you have changes in your supervisor configuration, you should run <code class="highlighter-rouge">sudo supervisorctl reread</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In this article, weâ€™ve set up a basic Django project in a virtual environment. Weâ€™ve configured Gunicorn/uWSGI to translate client requests so that Django can handle them. Afterwards, we set up Nginx to act as a reverse proxy to handle client connections and serve the correct project depending on the client request. We used supervisor in order to run service for our application server. Similar services can be written for other processes like celery worker or celery beat. The whole process can be automated using fabric script.</p>
:ET