{"pages":[{"title":"About","text":"I am a Software Engineer working in software industry since 2013. Mostly I work on Python and and related technologies. But I like to work on other front end technologies like AngularJS, Angular2+, Vue.js, Bootstrap, Jquery and Amazon Web Services. Below are some core technologies on which I have worked. Python Django Flask Selenium AngularJS/Angular2+ Vue.js Boostrap Jquery Jenkins AWS ECS, EC2, S3, SQS, RDS, EBS","link":"/about/index.html"},{"title":"Project","text":"","link":"/project/index.html"},{"title":"Search","text":"","link":"/search/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Creating Custom Django Filters in Django","text":"In django’s template framework, there is a wide variety of implicit filters which you can use for different purposes in your application. Filters are functions which control any input which is coming from template. For example you can capitalize a string with following syntax. 1{{ string|upper }} In above example, upper is the filter which is converting value coming into string into upper case. Why Custom FiltersSometimes you may end up requiring usefulness that is not fulfilled by Django’s builtin filters. You can amplify the layout motor by characterizing custom filters utilizing Python, and afterward make them accessible to your templates/layouts like this. 1{% load custom_filters %} How to create custom filtersFilters are defined in similar manner in which we def a function. It can take arguments and will return answer after manipulating arguments. You can also take inputs and return results as html. Custom filter should be in file which will be in the template tags directory.For a module to be a legitimate label library, it should have a template.Library instance, where all the filters are enrolled. In this way, near to the highest point of your module, place the accompanying: 12from django import templateregister = template.Library() Registering custom filtersWhen you’ve composed your filter definition, you have to enlist it with Library instance of yours, to make it accessible to Django’s template language: 1register.filter('filtername', filtername) You can register filter also as decorator like this Example1@register.filter(name='filtername') This line should be written just before the filter definition. Giving arguments to custom filter functionCustom filters are used in same manner as we use built in filters like this. 1{{ string|custom_filter}} Where custom_filter is name of filter. The filter will have one argument and value of string will be passed to that argument. You can pass maximum of two arguments to a custom filter. Syntax is like this1{{ string|custom_filter: second_argument}} Where string is first argument.More than two arguments are not supported in Django template language. You can use this approach if you want to pass a hard coded string to your filter. 1{{ string|custom_filter: “ ‘second_argument’, ‘third_argument’ “}} Then you can split string in you filter to perform your task. You can send more than one arguments by preprocessing data in view and putting it in a dictionary or you have to use custom tags. ExampleSuppose you are required to make a filter which will return required value in a dictionary.Here are steps to do thisNow create a directory templatetags in the same level at which models.py and views.py are and create __init__.py in that directory. In this way this directory will be treated as python package. Now create a file custom_filters.py in that directory.Write following code in custom_filters.py.","link":"/2018/06/09/Creating-Custom-Django-Filters-in-Django/"},{"title":"Part 2: Deploy Django using Nginx and Gunicorn/uWSGI - Celery Worker and Beat Setup","text":"In Part 1, we setup a Django server using uWSGI/Gunicorn and Nginx. This server only contain one service which is our application server. But sometimes, our server can have more than one service e.g. Celery Worker and Celery Beat etc. These services can be run using Supervisor. What is CeleryCelery is a simple, flexible, and reliable distributed system to process vast amounts of messages, while providing operations with the tools required to maintain such a system. It’s a task queue with focus on real-time processing, while also supporting task scheduling. Celery communicates via messages, usually using a broker to mediate between clients and workers. To initiate a task the client adds a message to the queue, the broker then delivers that message to a worker. Celery supports several message transport alternatives. List of supported brokers can be found here. SetupTo setup Celery for your project, you first need to choose a broker. For our current setup, we will be using Redis. For this, you first need to install Redis on your machine by running below command. 1sudo apt-get install redis Install Celery in your virtual environment by running below command and update your requirements.txt file. 12pip install celery[redis]pip freeze &gt; requirements.txt In next step, add a file celery.py in your project directory (with settings.py file). This file will look like this. 1234567891011121314151617from __future__ import absolute_import, unicode_literalsimport osfrom celery import Celery# set the default Django settings module for the 'celery' program.os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')app = Celery('myproject')# Using a string here means the worker doesn't have to serialize# the configuration object to child processes.# - namespace='CELERY' means all celery-related configuration keys# should have a `CELERY_` prefix.app.config_from_object('django.conf:settings', namespace='CELERY')# Load task modules from all registered Django app configs.app.autodiscover_tasks() You can create your tasks like this. 123@app.taskdef add(a, b): print (a+b) You will have to run your Worker process like this. $ celery -A myproject worker -l info A task can be added in queue using delay function like shown below. 1add.delay(2, 3) Celery BeatCelery Beat is a task scheduler which run a task periodically according to settings provided. Tasks are executed by available Worker nodes in the cluster. To add a periodic tasks for your project, just add following lines in your celery.py file. 12345678from celery.schedules import crontabapp.conf.beat_schedule = { 'your_task_id': { 'task': 'your_task', schedule': crontab(hour='*', minute='*/30') },} Run Celery Beat service like This $ celery -A myproject beat Above setting will run your task after every 30 minutes. Further settings can be seen here. DeploymentFor the deployment, supervisor can be used to run Celery Worker and Beat services. Django app will be run in similar way as discussed in Part 1. We will be making similar supervisor configurations for Celery Worker and Beat. For Celery Worker1234567891011[program:celery_worker]numprocs=1command=celery -A myproject worker -l infoautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=1000 For Celery Beat1234567891011[program:celery_beat]numprocs=1command=celery -A myproject worker -l infoautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=1001 One important thing is the priority of the your supervisor services. The priority of Celery Worker will be higher that Celery Beat. Deploy New VersionWhen you will add a new task or make some changes in existing tasks, you will have to restart both services. You will do this by running below commands. 12sudo supervisorctl restart celery_workersudo supervisorctl restart celery_beat ConclusionIn this article, we added setup Celery Worker and Beat in Django app that we setup in Part 1. We used Redis server as broker for our Celery setup. Then we ran Celery Worker and Beat services using supervisor. In next article, we will discuss how we can automate this whole process using fabric script.","link":"/2018/12/25/Part-2-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Celery-Setup/"},{"title":"Part 1: Deploy Django using Nginx and Gunicorn/uWSGI - Basic Setup","text":"Django is a python based framework that was developed to help developer to take applications from idea to fulfillment as fast as could reasonably be expected. Django incorporates a streamlined development server for testing your code locally. But for production purpose, a more advance and secure server is required. This article will help you to setup basic server of your Django based application. We will be setting up Django server on Ubuntu 18.04 for this article. Initial setupFor setting up server on Ubuntu, you need to install some packages which are listed below. Pip Python-dev Nginx To install these packages, run below commands. For Python-2.x12sudo apt-get updatesudo apt-get install python-pip python-dev libpq-dev nginx For Python-3.x12sudo apt-get updatesudo apt-get install python3-pip python3-dev libpq-dev nginx These commands will install all required packages in your server and you will be ready to start your server setup. Setup a Python Virtual EnvironmentFor setting up a Django application, we will have to setup a virtual environment. To do this, we first need access to the virtualenv command. We can install this with pip. For Python-2.x12sudo -H pip install --upgrade pipsudo -H pip install virtualenv For Python-3.x12sudo -H pip3 install --upgrade pipsudo -H pip3 install virtualenv Now you can create a virtual environment by using below command. 12mkdir myprojectvirtualenv venv Now activate your virtual environment by running below command. 1source venv/bin/activate Now install Django in this environment. 1pip install Django Setup a Django ApplicationSince we have setup a virtual environment and installed Django in it, we can create our basic Django application. Run below command to create a basic Django application. 1django-admin startproject myproject ~/myproject This will create a django application in you current directory. You can run your application like by running below command. 1python manage.py runserver Your app will be accessible on http://127.0.0.1:8000. Setup Gunicorn/uWSGIThe server we run in previous step through manage.py command is only mean for development purpose. For production environment, you need to use other servers like Gunicorn or uWSGI. For doing this, we first need to install these packages. For Gunicorn1pip install gunicorn For uWSGI1pip install uwsgi After installation of server of your choice, you need to test ability of that server to run your application. In your project directory, run following command. For Gunicorn1gunicorn --bind 0.0.0.0:8000 myproject.wsgi For uWSGI1uwsgi --http :8000 --module myproject.wsgi myproject.wsgi in both commands refers to the wsgi.py file in your project directory (with settings.py). Your app will be accessible on http://127.0.0.1:8000. Setup Gunicorn/uWSGI ServiceIn previous step, we verified that our application is running correctly with Gunicorn/uWSGI. In this step, we will create a service for these server so that it keeps on running as daemon on our server. To do this, we will be using supervisor. To install supervisor, run following command in your virtual environment. 1pip install supervisor To create a supervisor service, you need to create a supervisor configuration file for your project. To create one for your project, run following command. 1echo_supervisord_conf &gt; supervisord.conf This will create a sample supervisor configuration file which you can modify for your project. For our project, add one of the following according to choice of your server in your configuration file. For Gunicorn1234567891011[program:myproject_server]numprocs=1command=gunicorn --bind 0.0.0.0:8000 myproject.wsgiautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=999 For uWSGI1234567891011[program:myproject_server]numprocs=1command=uwsgi --http :8000 --module myproject.wsgiautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=999 In above configuration, you need exact path of gunicorn or uwsgi executable. If both packages are installed in virtual environment as in our case, we need to mention its path like venv/bin/gunicorn or venv/bin/uwsgi. Once you have added above configuration in supervisord.conf file, now you can start supervisor by running below command. 1supervisord For running server on startup. 1cat supervisord.conf &gt; /etc/supervisord.conf This will start a supervisor service with name myproject_server. Your can access tour server on http://127.0.0.1:8000. If you made some changes in supervisor configuration file, run following command. 1sudo supervisorctl reread If you made changes in your project code, run following command. 1sudo supervisorctl restart myproject_server Configure NginxAfter setting up Gunicorn/uWSGI, we need to setup Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginx’s sites-available directory. 1sudo nano /etc/nginx/sites-available/myproject Add following code in your Nginx configuration file (/etc/nginx/sites-available/myproject). 123456789server { listen 80; server_name server_domain_or_IP; location / { include proxy_params; proxy_pass http://127.0.0.1:8000; }} Save and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled directory. 1sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled Test your Nginx configuration for syntax errors by typing below command. 1sudo nginx -t If no errors are reported, restart Nginx by running below command. 1sudo systemctl restart nginx Your application will be available on http://127.0.0.1 or http://server_domain_or_IP. Deploying New VersionFor any deployment system, the process of deployment of new version is very important. For a good deployment process, this process should be as easy as possible. For deployment of a new version of your project for deployment system described in this article, following steps are required. Get latest code from your git repository. Run database migrations by running python manage.py migrate Collect static files from multiple apps into a single path by running python manage.py collectstatic Restart supervisor service by running sudo supervisorctl restart myproject_server These steps are only applicable if you have changes in your Django application. If you have changes in your supervisor configuration, you should run sudo supervisorctl reread. ConclusionIn this article, we’ve set up a basic Django project in a virtual environment. We’ve configured Gunicorn/uWSGI to translate client requests so that Django can handle them. Afterwards, we set up Nginx to act as a reverse proxy to handle client connections and serve the correct project depending on the client request. We used supervisor in order to run service for our application server. Similar services can be written for other processes like celery worker or celery beat. The whole process can be automated using fabric script.","link":"/2018/12/18/Part 1: Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Basic-Setup/"},{"title":"Part 3: Deploy Django using Nginx and Gunicorn/uWSGI - Automation with Fabric","text":"In part 1 of this series, we setup a Django server using uWSGI/Gunicorn and Nginx. In that part, all the steps of dependencies installation and configurations are performed one by one. The server we setup is very basic server having just application server. The database we used is Sqlite3 database. In real application, we will have PostgreSQL or MySQL which are more advance databases. Beside database and application server, we can have Celery workers or Celery Beat. For this type of servers, performing all steps one by one will be very hectic and time taking. So it is good to automate all this process using Fabric which is a high level Python (2.7, 3.4+) library designed to execute shell commands remotely over SSH, yielding useful Python objects in return. For further details, see Fabric documentation. Before we start writing fabric script, we first need to identify steps which we will be performing in order to setup a new machine and to deploy new version on server. For Fresh Setup Clone latest code Install required packages Setup database Requirement installation Migrate Collectstatic Configure supervisor Configure Nginx For Deploying new version Pull latest code from git repository Requirement installation Migrate Collectstatic Restart supervisor Fabfile FunctionsBelow we will be writing each functions which will be used in all above steps. Install required packagesAs we are setting up our server on Ubuntu, we will write commands according to Ubuuntu. 12345PACKAGE_LIST = ['git', 'supervisor', 'postgresql', 'python-pip', 'nginx'] #add all required packages in this listdef install_package(): sudo('apt-get update') sudo('apt-get install %s' % (' '.join(PACKAGE_LIST))) Setup databaseWe will be setting up Postgresql database for this server. Below is the code to setup a Postgresql database. 123456789DB_USER = \"db_user\" #define your user hereDB_PASS = \"db_pass\" #define your password hereDB_NAME = \"db_name\" #define your database name heredef setup_database(): sudo('psql -c \"CREATE USER %s WITH NOCREATEDB NOCREATEUSER \" \\ \"ENCRYPTED PASSWORD E\\'%s\\'\"' % (DB_USER, DB_PASS), user='postgres') sudo('psql -c \"CREATE DATABASE %s WITH OWNER %s\"' % ( DB_NAME, DB_USER), user='postgres') Pull latest code from git repository123def update_code(): branch = local(\"git symbolic-ref --short -q HEAD\", capture=True) local('git pull origin %s' % branch) Requirement installation12def install_requirements(): local('pip install -r requirements.txt') Migrate12def migrate(): local('python manage.py migrate') Collectstatic12def collectstatic(): local('python manage.py collectstatic') Configure supervisorWe will be using supervisor for running following services. uWSGI/Gunicorn server Celery worker Celery beat We have seen in Part 1 and Part 2 how to write supervisor configuration file for all above services. Create a file supervisor.conf and add below configurations in it. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152;; Add one of the above uWSGI/Gunicorm;; For gunicorn[program:myproject_server]numprocs=1command=gunicorn --bind 0.0.0.0:8000 myproject.wsgiautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=999;For uWSGI[program:myproject_server]numprocs=1command=uwsgi --http :8000 --module myproject.wsgiautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=999;;For Celery Worker**[program:celery_worker]numprocs=1command=celery -A myproject worker -l infoautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=1000;;For Celery Beat**[program:celery_beat]numprocs=1command=celery -A myproject worker -l infoautostart=trueautorestart=truestartsecs=10stopwaitsecs=600stopsignal=QUITstopasgroup=truekillasgroup=truepriority=1001 Below is the code to setup your supervisor. 12def configure_supervisor(): local('supervisord -c supervisor.conf') Configure NginxCreate a file nginx.conf in your project and add following configuration in it. 123456789server { listen 80; server_name server_domain_or_IP; location / { include proxy_params; proxy_pass http://127.0.0.1:8000; }} Below is code to setup nginx 12def configure_nginx(): sudo('ln -s nginx.conf /etc/nginx/sites-enabled/myproject.conf') Restart supervisor1234def restart_supervisor(): sudo('supervisorctl restart myproject_server') sudo('supervisorctl restart celery_worker') sudo('supervisorctl restart celery_beat') Restart Nginx12def restart_nginx(): sudo('systemctl restart nginx') For Fresh Setup1234567891011@taskdef setup(): install_package() setup_database() install_requirements() migrate() collectstatic() configure_supervisor() configure_nginx() restart_supervisor() restart_nginx() Run below command to setup your new server.1$ fab setup For Deploying new version1234567@taskdef deploy(): update_code() install_requirements() migrate() collectstatic() restart_supervisor() Run below command to setup your new server.1$ fab deploy ConclusionIn this article, we wrote a fabric script in order to automate setup and deployment process. We divided our whole process in small steps and automated each step. By combining all these steps in required order, we automated whole proces. This can be extend to handle very complex server. Complete fabfile can be seen here.","link":"/2018/12/27/Part-3-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Automation-with-Fabric/"},{"title":"Scenario based tests in Jasmine.js","text":"Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. This guide is running against Jasmine version 2.4.1. That was brief introduction of jasmine which you can also get on their website. Writing test in jasmine is not very difficult. Every test suite start with a function called ‘describe’ which takes two input. A string which is description of test case. A function is method or block of code which implements suite. Second block of test is it block. it take same inputs as describe, a string and a function. A simple jasmine test is shown below. 12345describe(&apos;Check Addition Result&apos;, function () { it(&apos;adds two numbers together&apos;, function () { expect(1 + 5).toEqual(6); });}); Here arguments of expect will be output of function to be tested, and toEqual will have expected result as argument. Getting StartedDownload latest standalone release from standalone download page of Jasmine. This will look like this Open SpecRunner in browser and you will look something like this. Now add following function in src/Player.js file. 12345678function evenOrOdd(input){ if(isNaN(input)){ return -1; } else{ return parseInt(input)%2==0; }} Now we will add tests for this function. Add following code in spec/PlayerSpec.js. 12345678910111213141516171819describe('Function: evenOrOdd()', function(){ it('Input is an even number', function(){ var result = evenOrOdd(4); expect(result).toBe(true); }); it('Input is a string', function(){ var result = evenOrOdd('string'); expect(result).toBe(-1); }); it('Input is a number in string', function(){ var result = evenOrOdd('4'); expect(result).toBe(true); }); it('Input is an odd number', function(){ var result = evenOrOdd(5); expect(result).toBe(false); });}); You will see result of your new tests like this when you will open SpecRunner.html in browser. You can see that we have to repeat same it block again and again. The only thing which is changing is description of test, input of function and expected output of function. Here we can use scenarios to avoid repetition of code. Scenarios In Jasmine testsWrite your scenarios like this 123456789101112131415161718192021var scenarios = [{ description: 'Input is an even number', input: 4, expected_output: true }, { description: 'Input is a string', input: 'string', expected_output: -1 }, { description: 'Input is a number in string', input: '4', expected_output: true }, { description: 'Input is an odd number', input: 5, expected_output: false },]; You can see that we just make a separate object for every test case and write all required data for a test in it. Now change your test like this 123456scenarios.map(function(value){ it(value.description, function(){ var result = evenOrOdd(value.input); expect(result).toBe(value.expected_output); });}); Now when you will run your tests, you will see same output as before. This is how we can use scenarios to avoid repetition of code in our tests. ConclusionYou can do a lot more with Jasmine like function related-matchers, spies and many more things.You can check detailed documentation from here. Jasmine can be used to test JavaScript code in you Django, Flask or Ruby project.","link":"/2018/04/09/Scenario-based-tests-in-Jasmine-js/"},{"title":"Using FFmpeg to create video thumbnails in Python","text":"FFmpeg is A complete, cross-platform solution to record, convert and stream audio and video. You can download it from here and install it by following this link for your platform. Detailed documentation of FFmpeg can be seen here. In this post, I will discuss how to user FFmpeg with Python. InstallationUbuntuOn Ubuntu, you can install by running following command 1sudo apt-get install ffmpeg Windows/MacYou can download and install you OS specific binaries from link. Creating ThumbnailPython have a wrapper for FFmpeg called FFmpy. You can see its documentation here. You can install it by running following command. 1pip install ffmpy The command to use FFmpeg to create thumbnail of a video is below 1ffmpeg -i input.mp4 -ss 00:00:04 -vframes 1 output.png input.mp4 is input video 00:00:04 is the position of thumbnail in video -vframes 1 shows number of frames you want to get output.png is the output image at provided position This command can be converted into python by following code. 12345678910from ffmpy import FFmpegff = FFmpeg(inputs={'input.mp4': None}, outputs={\"output.png\": ['-ss', '00:00:4', '-vframes', '1']})print ff.cmd# Print result# ffmpeg -i input.mp4 -ss 00:00:10 -vframes 1 output.pngff.run() In the above command, one frame was created. If you want to get multiple frames, you can use following command. 1ffmpeg -i input.mp4 -vf fps=1 out%d.png -vf fps=1 mean create frame after one minute This will be done in python like this 12345678910from ffmpy import FFmpegff = FFmpeg(inputs={'input.mp4': None}, outputs={\"out%d.png\": ['-vf', 'fps=1']})print ff.cmd# Print result#ffmpeg -i input.mp4 -vf fps=1 out%d.pngff.run() ConclusionWith above mentioned way of extracting video thumbnail using FFmpeg with python wrapper, we can run many more commands.","link":"/2018/02/09/Using-FFmpeg-to-create-video-thumbnails-in-Python/"},{"title":"Understanding Context Managers in Python","text":"Python context managers provides a way to perform some pre processing and post processing related to your cast. This processing can be allocation and releasing of some kind of resources or any other custom task. Context managers are used using Python with statement. This is in below example.123with something_that_returns_a_context_manager() as resource: foo(resource) print 'done using resource' The most common use of context managers is Resource Management. Uses of Context ManagersResource ManagementResource management, in simple word, can be called managing an organization’s resource in an efficient way when they are needed to increase productivity. In computing, resource management refers to effectively managing resources like RAM, ROM, network sockets, file handlers and power supply etc. We can say that resource management is management of resources and also using them only when they are needed and releasing resources when they have been used. Every programming language has its own way of managing resources. In Python, this is done using context managers using with statemente which releases specific resources when execution of specific block of code has been completed. Context manager is actually an object which epitomized or encapsulated these resources. A normal use case of resource management using context manager is a file handling. Normally file handling is done like this. 123file = open(file_name)# Read or write content of file here.file.close() The problem in this approach is that when there is some error in processing of file after it has been opened, file will remain open in memory. This problem can be solved by writing code like this.12345file = open(file_name)try: # Read or write content of file here.finally: file.close() In this way, independent of the result (success/error) of code in try block, file will be closed in finally block. This resolve our problem but it require manual release of the resources. Using with statement, this can be done like this.12with open(file_name) as file: # Read or write content of file here. with statement will allocate resources to block of code executing insite with block and when execution of that block will be complete, it will release all the resources. Other UsesThere can be other usefull uses of context managers. These can be used anywhere where some pre and post processing is required for your task. An example is the management of Asynchronous tasks where you want to have record of each tasks you are adding in queue and marking its status (success/error). In pre processing of that task, you will add a record of that task in database and in post processing, you will mark its status. How Context Manager worksContext managers are very easy to understand. The main components of a context manager a two methods. __enter__() __exit__() As we know context managers are enabled by with statement. They works by calling __enter__() when the with block is entered. It is like calling __init__() when object is created. It then binds return value to the target of as. The __exit__() function is called when the context is exited. Below it the example of file handling using context managers. 1234567891011121314class File(object): def __init__(self, file_name, method): self.file = open(file_name, method) def __enter__(self): return self.file def __exit__(self, type, value, traceback): print \"Exception has been handled\" self.file.close() return Truewith File('file.txt', 'w') as file: foo(file) Writing a custom Context ManagerWe can write custom context manager in Python. There are two different way of doing this. Context Manager as Class Generator as Context Manager Context Manager as ClassIn this way, we will write a class with two methods mentioned above i.e. __enter__() and __exit__(). Lets first discuss a scenario for which we want to write a context manager.We want to read or write a file. But our requirement is such that every file should have some text at start and end of file. 1234567891011class FileWithHeadingAndEnd(object): def __enter__(self): print 'Open' fo = open(\"foo.txt\", \"wb\") fo.write( \"File Heading\\n\") return fo def __exit__(self, exc_type, exc_val, exc_tb): fo.write( 'File End\\n'); fo.close() print 'Closed' Print statements are only for understanding code structure. When you will run this code, print statement will tell you code execution order. Below is the way to use this context manager. When you will run this, you will see file generated have a line at start and end of it. 123456with FileWithHeadingAndEnd() as fo: # Code Block i = 0 while i&lt;10: fo.write(\"Line: %s \\n\" % str(i)) i += 1 How this code works?These are the steps which python interpreter will perform when it will find a with statement. Python interpreter will store FileWithHeadingAndEnd() object in a temporary variable. with statement will call __enter__() method of context manager object __enter__() method will create a file, add heading in it and return it to as path of the context manager. Code block under with statement will be executed. with statement will call __exit__() method of context manager when code block has been executed. What if error occur during Execution of code block?Suppose an error occurs during execution of code block, following would be the steps taken by python interpreter with statement will catch error with statement will call __exit__() method of context manager with details of exception. __exit__() method will close the file, and return None (In Python, if function do not have any return statement, it returns None) with statement will check return value and if it is not true, it will re raise exception. Generator as Context ManagerIn method mentioned above, we created context manager with class having __enter__() and __exit__() functions. In this method, we will use generator function as context manager.This is shown in below example.123456789101112131415import contextlib@contextlib.contextmanagerdef make_context(): print ' entering' try: fo = open(\"foo2.txt\", \"wb\") fo.write(\"File Heading\\n\") yield fo except RuntimeError, err: print 'ERROR:', err finally: print 'exiting' fo.write('File End\\n'); fo.close() We can use this context manager in similar as above.12345with make_context() as fo: i = 0 while i&lt;10: fo.write(\"Line: %s \\n\" % str(i)) i += 1 ConclusionMany use cases can be found for context manager. A good thing about context manager is that you have no need to remember to release resources. All the management is done by object itself.","link":"/2018/06/18/Understanding-Context-Managers-in-Python/"},{"title":"How to convert HTML to PDF preserving CSS","text":"Converting a web page into PDF becomes very difficult when you want to preserve CSS of your page. There are two ways of performing this task. Client Side Server Side The solutions which work on client side are JavaScript libraries like jsPDF but they do not impress the user. The server side solutions are mostly APIs but most of them are not free. There is one solution for this problem which is Apache FOP. Apache FOP is actually a free tool which work on server side which convert HTML/XML into PDF and provides lot of formatting for PDF . In this article, I will show you how to create PDF using FOP. What is Apache FOP?Formatting Objects Processor abbreviated as FOP is a Java application that changes over XSL Formatting Objects (XSL-FO) documents to PDF or other printable arrangements. Its latest available version is 1.1. Running FOPDownload FOP from following link. Extract fop in some folder. You can run fop by running following command 1./path_to_fop_directory/fop When you have successfully run fop, download following rar file from link.There are two files and an image folder in rar file. I am writing them in list below. ⋅⋅ Index.html⋅⋅ Index.xsl The index.html is the HTML page which will be converted into PDF. Index.xsl is the style sheet for this HTML page. Enter in directory in which you have downloaded these two file through command line and run following command. 1./fop –xml index.html –xsl index.xsl –pdf index.pdf In this command, you are running FOP and giving it two arguments which are xml file (index.html) and xsl file (index.xsl) and telling it that convert HTML file into PDF (index.pdf). Your output will be like this with no footers and headers. Now open xsl file and start understanding it. Every section there have comments telling its purpose but I will explain some sections. Header and Footer SectionLook at the section below in xsl file. This section is for setting header and footer of your PDF. Now edit xsl as shown in below section. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;fo:static-content flow-name=\"rb-page\"&gt; &lt;fo:block font-size=\"10pt\"&gt; &lt;fo:table table-layout=\"fixed\" inline-progression-dimension=\"100%\"&gt; &lt;fo:table-column column-width=\"50%\"/&gt; &lt;fo:table-column column-width=\"50%\"/&gt; &lt;fo:table-body&gt; &lt;fo:table-row&gt; &lt;fo:table-cell&gt; &lt;fo:block text-align=\"start\"&gt; Test Pdf file Generated by FOP fo:block&gt; fo:table-cell&gt; &lt;fo:table-cell&gt; &lt;fo:block text-align=\"end\" font-weight=\"bold\" font-family=\"monospace\"&gt; M Hassan Siddiqui fo:block&gt; fo:table-cell&gt; fo:table-row&gt; fo:table-body&gt; fo:table&gt; fo:block&gt; fo:static-content&gt; &lt;fo:static-content flow-name=\"ra-page\"&gt; &lt;fo:block font-size=\"10pt\"&gt; &lt;fo:table table-layout=\"fixed\" inline-progression-dimension=\"100%\"&gt; &lt;fo:table-column column-width=\"50%\"/&gt; &lt;fo:table-column column-width=\"50%\"/&gt; &lt;fo:table-body&gt; &lt;fo:table-row&gt; &lt;fo:table-cell&gt; &lt;fo:block text-align=\"start\"&gt; Footer Text fo:block&gt; fo:table-cell&gt; &lt;fo:table-cell&gt; &lt;fo:block text-align=\"end\"&gt;Page of fo:block&gt; fo:table-cell&gt; fo:table-row&gt; fo:table-body&gt; fo:table&gt; fo:block&gt; fo:static-content&gt; Now run the above command to generate PDF and you will see following header and footer in PDF. If your PDF file is open while running this command, it will give error in Windows but will work fine in Ubuntu. In Windows, close that file and run command. Header Footer You can also choose an image as footer or header. Put following line in place of ‘Footer Text’. 1&lt;fo:external-graphic width=\"200pt\" height=\"200pt\" content-width=\"150pt\" content-height=\"150pt\" src=\"images/fop.jpg\"/&gt; Styling for a specific elementIn xsl file, there are defined behavior for all tags which will we used in your HTML. For example, following section is defining tag. 123456789101112131415&lt;xsl:template match=\"b\"&gt; &lt;fo:block font-weight=\"bold\" &gt; &lt;xsl:attribute name=\"id\"&gt; &lt;xsl:choose&gt; &lt;xsl:when test=\"@id\"&gt; &lt;xsl:value-of select=\"@id\"/&gt; xsl:when&gt; &lt;xsl:otherwise&gt; &lt;xsl:value-of select=\"generate-id()\"/&gt; xsl:otherwise&gt; xsl:choose&gt; xsl:attribute&gt; &lt;xsl:apply-templates select=\"*|text()\"/&gt; fo:block&gt; xsl:template&gt; If you want to give it some other style like color, you have to include following line 123456789101112131415&lt;xsl:template match=\"b\"&gt; &lt;fo:block font-weight=\"bold\" xsl:use-attribute-sets=\"boldTextStyles\"&gt; &lt;xsl:attribute name=\"id\"&gt; &lt;xsl:choose&gt; &lt;xsl:when test=\"@id\"&gt; &lt;xsl:value-of select=\"@id\"/&gt; xsl:when&gt; &lt;xsl:otherwise&gt; &lt;xsl:value-of select=\"generate-id()\"/&gt; xsl:otherwise&gt; xsl:choose&gt; xsl:attribute&gt; &lt;xsl:apply-templates select=\"*|text()\"/&gt; fo:block&gt;xsl:template&gt; boldTextStyle is like name of id you give to some div. Now write this line at bottom of file but before ‘’. 123&lt;xsl:attribute-set name=\"boldTextStyles\"&gt; &lt;xsl:attribute name=\"color\"&gt;#FF0000xsl:attribute&gt;xsl:attribute-set&gt; Now when you will generate PDF, you will see color of bold text will be red. FOP actually convert xml into PDF. XML and HTML are same but in HTML, same types of elements are differentiated with each other with the help of their ids. For example if you have two types of bold texts with red and green color, you just give each tag an id and in css, you give them their required color. But when this file will be converted into PDF, fop will give same style to every tag when fop will find a tag in web page, it will find its definition in xsl file and will do whatever that definition says with that section. If you want two bold section having different color, then you just have to write different tags for each section. Like if one type of bold text is red and other is green, you define another tag in xsl like defined in below section and give it style as required. Copy that code before ‘’ and generate PDF. This section is defining another tag having definition same as for but will have different style 12345678910111213141516171819202122232425&lt;xsl:template match=\"bold_green\"&gt; &lt;fo:block font-weight=\"bold\" xsl:use-attribute-sets=\"boldGreenTextStyles\"&gt; &lt;xsl:attribute name=\"id\"&gt; &lt;xsl:choose&gt; &lt;xsl:when test=\"@id\"&gt; &lt;xsl:value-of select=\"@id\"/&gt; xsl:when&gt; &lt;xsl:otherwise&gt; &lt;xsl:value-of select=\"generate-id()\"/&gt; xsl:otherwise&gt; xsl:choose&gt; xsl:attribute&gt; &lt;xsl:apply-templates select=\"*|text()\"/&gt; fo:block&gt; xsl:template&gt;&lt;!-- ============================================ Styling for boldGreenTextStyles =============================================== --&gt;&lt;xsl:attribute-set name=\" boldGreenTextStyles \"&gt; &lt;xsl:attribute name=\"color\"&gt;#00FF00xsl:attribute&gt;xsl:attribute-set&gt; Add this line in index.html 1&lt;bold_green&gt; This is bold green text &lt;/bold_green&gt; Now output PDF will be like this ConclusionTo use fop and get PDF according to demand, you first have to convert your HTML code into xml which will be used with xsl to generate PDF. You will have to translate all the css into xsl to get exact PDF as you web page look like. When you write an HTML page, if you miss close tags like &lt;/b&gt; or &lt;/p&gt; etc., browser just ignore them and show you the output. That is not the case when you are generating PDF from fop. Fop will give an error when it does not find a closing tag of a tag. Even when you write &lt;br&gt; instead of &lt;br/&gt;, it will give error. So you have to write code very carefully to perform your task.","link":"/2018/01/09/How-to-convert-HTML-to-PDF-preserving-CSS/"}],"tags":[{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Custom-Filters","slug":"Custom-Filters","link":"/tags/Custom-Filters/"},{"name":"Django-Deployment","slug":"Django-Deployment","link":"/tags/Django-Deployment/"},{"name":"Gunicorn","slug":"Gunicorn","link":"/tags/Gunicorn/"},{"name":"uWSGI","slug":"uWSGI","link":"/tags/uWSGI/"},{"name":"Supervisor","slug":"Supervisor","link":"/tags/Supervisor/"},{"name":"Celery","slug":"Celery","link":"/tags/Celery/"},{"name":"Fabric","slug":"Fabric","link":"/tags/Fabric/"},{"name":"Jasmine.js","slug":"Jasmine-js","link":"/tags/Jasmine-js/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"JavaScript-Testing","slug":"JavaScript-Testing","link":"/tags/JavaScript-Testing/"},{"name":"JavaScript-Unittest","slug":"JavaScript-Unittest","link":"/tags/JavaScript-Unittest/"},{"name":"Scenario-Based-Tests","slug":"Scenario-Based-Tests","link":"/tags/Scenario-Based-Tests/"},{"name":"FFmpeg","slug":"FFmpeg","link":"/tags/FFmpeg/"},{"name":"Thumbnail","slug":"Thumbnail","link":"/tags/Thumbnail/"},{"name":"Context-Manager","slug":"Context-Manager","link":"/tags/Context-Manager/"},{"name":"Custom-Context-Manager","slug":"Custom-Context-Manager","link":"/tags/Custom-Context-Manager/"},{"name":"Python-Generators","slug":"Python-Generators","link":"/tags/Python-Generators/"},{"name":"Python-Resource-Management","slug":"Python-Resource-Management","link":"/tags/Python-Resource-Management/"},{"name":"Html-to-PDF","slug":"Html-to-PDF","link":"/tags/Html-to-PDF/"},{"name":"Apache-FOP","slug":"Apache-FOP","link":"/tags/Apache-FOP/"},{"name":"FOP","slug":"FOP","link":"/tags/FOP/"},{"name":"XML","slug":"XML","link":"/tags/XML/"},{"name":"XSL","slug":"XSL","link":"/tags/XSL/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Django","slug":"Python/Django","link":"/categories/Python/Django/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"HTML to PDF","slug":"HTML-to-PDF","link":"/categories/HTML-to-PDF/"}]}