<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Part 3: Deploy Django using Nginx and Gunicorn/uWSGI - Automation with Fabric</title>
      <link href="/2018/12/27/Part-3-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Automation-with-Fabric/"/>
      <url>/2018/12/27/Part-3-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Automation-with-Fabric/</url>
      <content type="html"><![CDATA[<p>In part 1 of this series, we setup a Django server using uWSGI/Gunicorn and Nginx. In that part, all the steps of dependencies installation and configurations are performed one by one. The server we setup is very basic server having just application server. The database we used is Sqlite3 database. In real application, we will have PostgreSQL or MySQL which are more advance databases. Beside database and application server, we can have Celery workers or Celery Beat. For this type of servers, performing all steps one by one will be very hectic and time taking. So it is good to automate all this process using Fabric which is a high level Python (2.7, 3.4+) library designed to execute shell commands remotely over SSH, yielding useful Python objects in return. For further details, see <a href="http://www.fabfile.org" target="_blank" rel="noopener">Fabric documentation</a>.</p><a id="more"></a><p>Before we start writing fabric script, we first need to identify steps which we will be performing in order to setup a new machine and to deploy new version on server. </p><p><strong>For Fresh Setup</strong></p><ol><li>Clone latest code</li><li>Install required packages</li><li>Setup database</li><li>Requirement installation</li><li>Migrate</li><li>Collectstatic</li><li>Configure supervisor</li><li>Configure Nginx</li></ol><p><strong>For Deploying new version</strong></p><ol><li>Pull latest code from git repository</li><li>Requirement installation</li><li>Migrate</li><li>Collectstatic</li><li>Restart supervisor</li></ol><h1 id="Fabfile-Functions"><a href="#Fabfile-Functions" class="headerlink" title="Fabfile Functions"></a>Fabfile Functions</h1><p>Below we will be writing each functions which will be used in all above steps.</p><h2 id="Install-required-packages"><a href="#Install-required-packages" class="headerlink" title="Install required packages"></a>Install required packages</h2><p>As we are setting up our server on Ubuntu, we will write commands according to Ubuuntu.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_LIST = [<span class="hljs-string">'git'</span>, <span class="hljs-string">'supervisor'</span>, <span class="hljs-string">'postgresql'</span>, <span class="hljs-string">'python-pip'</span>, <span class="hljs-string">'nginx'</span>] <span class="hljs-comment">#add all required packages in this list</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">install_package</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sudo(<span class="hljs-string">'apt-get update'</span>)</span><br><span class="line">    sudo(<span class="hljs-string">'apt-get install %s'</span> % (<span class="hljs-string">' '</span>.join(PACKAGE_LIST)))</span><br></pre></td></tr></table></figure><h2 id="Setup-database"><a href="#Setup-database" class="headerlink" title="Setup database"></a>Setup database</h2><p>We will be setting up Postgresql database for this server. Below is the code to setup a Postgresql database.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DB_USER = <span class="hljs-string">"db_user"</span> <span class="hljs-comment">#define your user here</span></span><br><span class="line">DB_PASS = <span class="hljs-string">"db_pass"</span> <span class="hljs-comment">#define your password here</span></span><br><span class="line">DB_NAME = <span class="hljs-string">"db_name"</span> <span class="hljs-comment">#define your database name here</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup_database</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sudo(<span class="hljs-string">'psql -c "CREATE USER %s WITH NOCREATEDB NOCREATEUSER " \</span></span><br><span class="line"><span class="hljs-string">         "ENCRYPTED PASSWORD E\'%s\'"'</span> % (DB_USER, DB_PASS), user=<span class="hljs-string">'postgres'</span>)</span><br><span class="line">    sudo(<span class="hljs-string">'psql -c "CREATE DATABASE %s WITH OWNER %s"'</span> % (</span><br><span class="line">         DB_NAME, DB_USER), user=<span class="hljs-string">'postgres'</span>)</span><br></pre></td></tr></table></figure><h2 id="Pull-latest-code-from-git-repository"><a href="#Pull-latest-code-from-git-repository" class="headerlink" title="Pull latest code from git repository"></a>Pull latest code from git repository</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_code</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    branch = local(<span class="hljs-string">"git symbolic-ref --short -q HEAD"</span>, capture=<span class="hljs-keyword">True</span>)</span><br><span class="line">    local(<span class="hljs-string">'git pull origin %s'</span> % branch)</span><br></pre></td></tr></table></figure><h2 id="Requirement-installation"><a href="#Requirement-installation" class="headerlink" title="Requirement installation"></a>Requirement installation</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">install_requirements</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    local(<span class="hljs-string">'pip install -r requirements.txt'</span>)</span><br></pre></td></tr></table></figure><h2 id="Migrate"><a href="#Migrate" class="headerlink" title="Migrate"></a>Migrate</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">migrate</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    local(<span class="hljs-string">'python manage.py migrate'</span>)</span><br></pre></td></tr></table></figure><h2 id="Collectstatic"><a href="#Collectstatic" class="headerlink" title="Collectstatic"></a>Collectstatic</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collectstatic</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    local(<span class="hljs-string">'python manage.py collectstatic'</span>)</span><br></pre></td></tr></table></figure><h2 id="Configure-supervisor"><a href="#Configure-supervisor" class="headerlink" title="Configure supervisor"></a>Configure supervisor</h2><p>We will be using supervisor for running following services.</p><ul><li>uWSGI/Gunicorn server</li><li>Celery worker</li><li>Celery beat</li></ul><p>We have seen in <a href="/2018/12/18/Part%201:%20Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Basic-Setup/">Part 1</a> and <a href="/2018/12/25/Part-2-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Celery-Setup/">Part 2</a> how to write supervisor configuration file for all above services. Create a file <code>supervisor.conf</code> and add below configurations in it. </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">;; Add one of the above uWSGI/Gunicorm</span><br><span class="line">;; For gunicorn</span><br><span class="line">[program:myproject_server]</span><br><span class="line">numprocs=1</span><br><span class="line">command=gunicorn --bind 0.0.0.0:8000 myproject.wsgi</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=999</span><br><span class="line"></span><br><span class="line">;For uWSGI</span><br><span class="line">[program:myproject_server]</span><br><span class="line">numprocs=1</span><br><span class="line">command=uwsgi --http :8000 --module myproject.wsgi</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=999</span><br><span class="line"></span><br><span class="line">;;For Celery Worker**</span><br><span class="line">[program:celery_worker]</span><br><span class="line">numprocs=1</span><br><span class="line">command=celery -A myproject worker -l info</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=1000</span><br><span class="line"></span><br><span class="line">;;For Celery Beat**</span><br><span class="line">[program:celery_beat]</span><br><span class="line">numprocs=1</span><br><span class="line">command=celery -A myproject worker -l info</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=1001</span><br></pre></td></tr></table></figure><p>Below is the code to setup your supervisor.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">configure_supervisor</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    local(<span class="hljs-string">'supervisord -c supervisor.conf'</span>)</span><br></pre></td></tr></table></figure><h2 id="Configure-Nginx"><a href="#Configure-Nginx" class="headerlink" title="Configure Nginx"></a>Configure Nginx</h2><p>Create a file <code>nginx.conf</code> in your project and add following configuration in it.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name server_domain_or_IP;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include proxy_params;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Below is code to setup nginx</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">configure_nginx</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sudo(<span class="hljs-string">'ln -s nginx.conf /etc/nginx/sites-enabled/myproject.conf'</span>)</span><br></pre></td></tr></table></figure><h2 id="Restart-supervisor"><a href="#Restart-supervisor" class="headerlink" title="Restart supervisor"></a>Restart supervisor</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restart_supervisor</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sudo(<span class="hljs-string">'supervisorctl restart myproject_server'</span>)</span><br><span class="line">    sudo(<span class="hljs-string">'supervisorctl restart celery_worker'</span>)</span><br><span class="line">    sudo(<span class="hljs-string">'supervisorctl restart celery_beat'</span>)</span><br></pre></td></tr></table></figure><h2 id="Restart-Nginx"><a href="#Restart-Nginx" class="headerlink" title="Restart Nginx"></a>Restart Nginx</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restart_nginx</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sudo(<span class="hljs-string">'systemctl restart nginx'</span>)</span><br></pre></td></tr></table></figure><h1 id="For-Fresh-Setup"><a href="#For-Fresh-Setup" class="headerlink" title="For Fresh Setup"></a>For Fresh Setup</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@task</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    install_package()</span><br><span class="line">    setup_database()</span><br><span class="line">    install_requirements()</span><br><span class="line">    migrate()</span><br><span class="line">    collectstatic()</span><br><span class="line">    configure_supervisor()</span><br><span class="line">    configure_nginx()</span><br><span class="line">    restart_supervisor()</span><br><span class="line">    restart_nginx()</span><br></pre></td></tr></table></figure><p>Run below command to setup your new server.<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fab setup</span><br></pre></td></tr></table></figure></p><h1 id="For-Deploying-new-version"><a href="#For-Deploying-new-version" class="headerlink" title="For Deploying new version"></a>For Deploying new version</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@task</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    update_code()</span><br><span class="line">    install_requirements()</span><br><span class="line">    migrate()</span><br><span class="line">    collectstatic()</span><br><span class="line">    restart_supervisor()</span><br></pre></td></tr></table></figure><p>Run below command to setup your new server.<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fab deploy</span><br></pre></td></tr></table></figure></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this article, we wrote a fabric script in order to automate setup and deployment process. We divided our whole process in small steps and automated each step. By combining all these steps in required order, we automated whole proces. This can be extend to handle very complex server. Complete <code>fabfile</code> can be seen <a href="https://gist.github.com/mhsiddiqui/dd129b03bd780c8dadb4b09005fb76ca" target="_blank" rel="noopener">here</a>.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Django-Deployment </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> uWSGI </tag>
            
            <tag> Supervisor </tag>
            
            <tag> Fabric </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Part 2: Deploy Django using Nginx and Gunicorn/uWSGI - Celery Worker and Beat Setup</title>
      <link href="/2018/12/25/Part-2-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Celery-Setup/"/>
      <url>/2018/12/25/Part-2-Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Celery-Setup/</url>
      <content type="html"><![CDATA[<p>In Part 1, we setup a Django server using uWSGI/Gunicorn and Nginx. This server only contain one service which is our application server. But sometimes, our server can have more than one service e.g. Celery Worker and Celery Beat etc. These services can be run using Supervisor.</p><a id="more"></a><h1 id="What-is-Celery"><a href="#What-is-Celery" class="headerlink" title="What is Celery"></a>What is Celery</h1><p>Celery is a simple, flexible, and reliable distributed system to process vast amounts of messages, while providing operations with the tools required to maintain such a system. It’s a task queue with focus on real-time processing, while also supporting task scheduling. Celery communicates via messages, usually using a broker to mediate between clients and workers. To initiate a task the client adds a message to the queue, the broker then delivers that message to a worker. Celery supports several message transport alternatives. List of supported brokers can be found <a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html" target="_blank" rel="noopener">here</a>.</p><h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>To setup Celery for your project, you first need to choose a broker. For our current setup, we will be using Redis. For this, you first need to install Redis on your machine by running below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis</span><br></pre></td></tr></table></figure><p>Install Celery in your virtual environment by running below command and update your requirements.txt file.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install celery[redis]</span><br><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>In next step, add a file <code>celery.py</code> in your project directory (with <code>settings.py</code> file). This file will look like this.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># set the default Django settings module for the 'celery' program.</span></span><br><span class="line">os.environ.setdefault(<span class="hljs-string">'DJANGO_SETTINGS_MODULE'</span>, <span class="hljs-string">'myproject.settings'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="hljs-string">'myproject'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Using a string here means the worker doesn't have to serialize</span></span><br><span class="line"><span class="hljs-comment"># the configuration object to child processes.</span></span><br><span class="line"><span class="hljs-comment"># - namespace='CELERY' means all celery-related configuration keys</span></span><br><span class="line"><span class="hljs-comment">#   should have a `CELERY_` prefix.</span></span><br><span class="line">app.config_from_object(<span class="hljs-string">'django.conf:settings'</span>, namespace=<span class="hljs-string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Load task modules from all registered Django app configs.</span></span><br><span class="line">app.autodiscover_tasks()</span><br></pre></td></tr></table></figure><p>You can create your tasks like this.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@app.task</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">print</span> (a+b)</span><br></pre></td></tr></table></figure><p>You will have to run your Worker process like this.</p><blockquote><p>$ celery -A myproject worker -l info</p></blockquote><p>A task can be added in queue using <code>delay</code> function like shown below.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add.delay(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="Celery-Beat"><a href="#Celery-Beat" class="headerlink" title="Celery Beat"></a>Celery Beat</h1><p>Celery Beat is a task scheduler which run a task periodically according to settings provided. Tasks are executed by available Worker nodes in the cluster. To add a periodic tasks for your project, just add following lines in your <code>celery.py</code> file.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> celery.schedules <span class="hljs-keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="hljs-string">'your_task_id'</span>: &#123;</span><br><span class="line">        <span class="hljs-string">'task'</span>: <span class="hljs-string">'your_task'</span>,</span><br><span class="line">        schedule<span class="hljs-string">': crontab(hour='</span>*<span class="hljs-string">', minute='</span>*/<span class="hljs-number">30</span><span class="hljs-string">')</span></span><br><span class="line"><span class="hljs-string">    &#125;,</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><p>Run Celery Beat service like This</p><blockquote><p>$ celery -A myproject beat</p></blockquote><p>Above setting will run your task after every 30 minutes. Further settings can be seen <a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html" target="_blank" rel="noopener">here</a>.</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>For the deployment, supervisor can be used to run Celery Worker and Beat services. Django app will be run in similar way as discussed in Part 1. We will be making similar supervisor configurations for Celery Worker and Beat.</p><h2 id="For-Celery-Worker"><a href="#For-Celery-Worker" class="headerlink" title="For Celery Worker"></a>For Celery Worker</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[program:celery_worker]</span><br><span class="line">numprocs=1</span><br><span class="line">command=celery -A myproject worker -l info</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=1000</span><br></pre></td></tr></table></figure><h2 id="For-Celery-Beat"><a href="#For-Celery-Beat" class="headerlink" title="For Celery Beat"></a>For Celery Beat</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[program:celery_beat]</span><br><span class="line">numprocs=1</span><br><span class="line">command=celery -A myproject worker -l info</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=1001</span><br></pre></td></tr></table></figure><p>One important thing is the priority of the your supervisor services. The priority of Celery Worker will be higher that Celery Beat.</p><h1 id="Deploy-New-Version"><a href="#Deploy-New-Version" class="headerlink" title="Deploy New Version"></a>Deploy New Version</h1><p>When you will add a new task or make some changes in existing tasks, you will have to restart both services. You will do this by running below commands.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl restart celery_worker</span><br><span class="line">sudo supervisorctl restart celery_beat</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this article, we added setup Celery Worker and Beat in Django app that we setup in Part 1. We used Redis server as broker for our Celery setup. Then we ran Celery Worker and Beat services using supervisor. In next article, we will discuss how we can automate this whole process using fabric script.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Django-Deployment </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> uWSGI </tag>
            
            <tag> Supervisor </tag>
            
            <tag> Celery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Part 1: Deploy Django using Nginx and Gunicorn/uWSGI - Basic Setup</title>
      <link href="/2018/12/18/Part%201:%20Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Basic-Setup/"/>
      <url>/2018/12/18/Part%201:%20Deploy-Django-using-Nginx-and-Gunicorn-uWSGI-Basic-Setup/</url>
      <content type="html"><![CDATA[<p>Django is a python based framework that was developed to help developer to take applications from idea to fulfillment as fast as could reasonably be expected. Django incorporates a streamlined development server for testing your code locally. But for production purpose, a more advance and secure server is required. This article will help you to setup basic server of your Django based application. We will be setting up Django server on Ubuntu 18.04 for this article.</p><a id="more"></a><h2 id="Initial-setup"><a href="#Initial-setup" class="headerlink" title="Initial setup"></a>Initial setup</h2><p>For setting up server on Ubuntu, you need to install some packages which are listed below.</p><ol><li>Pip</li><li>Python-dev</li><li>Nginx</li></ol><p>To install these packages, run below commands.</p><p><strong>For Python-2.x</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-pip python-dev libpq-dev nginx</span><br></pre></td></tr></table></figure></p><p><strong>For Python-3.x</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3-pip python3-dev libpq-dev nginx</span><br></pre></td></tr></table></figure></p><p>These commands will install all required packages in your server and you will be ready to start your server setup.</p><h2 id="Setup-a-Python-Virtual-Environment"><a href="#Setup-a-Python-Virtual-Environment" class="headerlink" title="Setup a Python Virtual Environment"></a>Setup a Python Virtual Environment</h2><p>For setting up a Django application, we will have to setup a virtual environment. To do this, we first need access to the <code>virtualenv</code> command. We can install this with pip.</p><p><strong>For Python-2.x</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install --upgrade pip</span><br><span class="line">sudo -H pip install virtualenv</span><br></pre></td></tr></table></figure></p><p><strong>For Python-3.x</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip3 install --upgrade pip</span><br><span class="line">sudo -H pip3 install virtualenv</span><br></pre></td></tr></table></figure></p><p>Now you can create a virtual environment by using below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><p>Now activate your virtual environment by running below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><p>Now install Django in this environment.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django</span><br></pre></td></tr></table></figure><h2 id="Setup-a-Django-Application"><a href="#Setup-a-Django-Application" class="headerlink" title="Setup a Django Application"></a>Setup a Django Application</h2><p>Since we have setup a virtual environment and installed Django in it, we can create our basic Django application. Run below command to create a basic Django application.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject myproject ~/myproject</span><br></pre></td></tr></table></figure><p>This will create a django application in you current directory. You can run your application like by running below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>Your app will be accessible on <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a>.</p><h2 id="Setup-Gunicorn-uWSGI"><a href="#Setup-Gunicorn-uWSGI" class="headerlink" title="Setup Gunicorn/uWSGI"></a>Setup Gunicorn/uWSGI</h2><p>The server we run in previous step through <code>manage.py</code> command is only mean for development purpose. For production environment, you need to use other servers like Gunicorn or uWSGI. For doing this, we first need to install these packages.</p><p><strong>For Gunicorn</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure></p><p><strong>For uWSGI</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure></p><p>After installation of server of your choice, you need to test ability of that server to run your application. In your project directory, run following command.</p><p><strong>For Gunicorn</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --<span class="hljs-built_in">bind</span> 0.0.0.0:8000 myproject.wsgi</span><br></pre></td></tr></table></figure></p><p><strong>For uWSGI</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module myproject.wsgi</span><br></pre></td></tr></table></figure></p><p><code>myproject.wsgi</code> in both commands refers to the <code>wsgi.py</code> file in your project directory (with settings.py). Your app will be accessible on <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a>.</p><h2 id="Setup-Gunicorn-uWSGI-Service"><a href="#Setup-Gunicorn-uWSGI-Service" class="headerlink" title="Setup Gunicorn/uWSGI Service"></a>Setup Gunicorn/uWSGI Service</h2><p>In previous step, we verified that our application is running correctly with Gunicorn/uWSGI. In this step, we will create a service for these server so that it keeps on running as daemon on our server. To do this, we will be using <a href="http://supervisord.org/index.html" target="_blank" rel="noopener"><code>supervisor</code></a>. To install <code>supervisor</code>, run following command in your virtual environment.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>To create a supervisor service, you need to create a supervisor configuration file for your project. To create one for your project, run following command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure><p>This will create a sample supervisor configuration file which you can modify for your project. For our project, add one of the following according to choice of your server in your configuration file.</p><p><strong>For Gunicorn</strong><br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[program:myproject_server]</span><br><span class="line">numprocs=1</span><br><span class="line">command=gunicorn --bind 0.0.0.0:8000 myproject.wsgi</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=999</span><br></pre></td></tr></table></figure></p><p><strong>For uWSGI</strong><br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[program:myproject_server]</span><br><span class="line">numprocs=1</span><br><span class="line">command=uwsgi --http :8000 --module myproject.wsgi</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line">stopwaitsecs=600</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">priority=999</span><br></pre></td></tr></table></figure></p><p>In above configuration, you need exact path of <code>gunicorn</code> or <code>uwsgi</code> executable. If both packages are installed in virtual environment as in our case, we need to mention its path like <code>venv/bin/gunicorn</code> or <code>venv/bin/uwsgi</code>. Once you have added above configuration in <code>supervisord.conf</code> file, now you can start supervisor by running below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord</span><br></pre></td></tr></table></figure><p>For running server on startup.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat supervisord.conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure><p>This will start a supervisor service with name <code>myproject_server</code>. Your can access tour server on <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a>. If you made some changes in supervisor configuration file, run following command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl reread</span><br></pre></td></tr></table></figure><p>If you made changes in your project code, run following command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl restart myproject_server</span><br></pre></td></tr></table></figure><h2 id="Configure-Nginx"><a href="#Configure-Nginx" class="headerlink" title="Configure Nginx"></a>Configure Nginx</h2><p>After setting up Gunicorn/uWSGI, we need to setup Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginx’s sites-available directory.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/myproject</span><br></pre></td></tr></table></figure><p>Add following code in your Nginx configuration file (/etc/nginx/sites-available/myproject).</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name server_domain_or_IP;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include proxy_params;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Save and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled directory.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure><p>Test your Nginx configuration for syntax errors by typing below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><p>If no errors are reported, restart Nginx by running below command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>Your application will be available on <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> or <a href="http://server_domain_or_IP" target="_blank" rel="noopener">http://server_domain_or_IP</a>.</p><h2 id="Deploying-New-Version"><a href="#Deploying-New-Version" class="headerlink" title="Deploying New Version"></a>Deploying New Version</h2><p>For any deployment system, the process of deployment of new version is very important. For a good deployment process, this process should be as easy as possible. For deployment of a new version of your project for deployment system described in this article, following steps are required.</p><ol><li>Get latest code from your git repository.</li><li>Run database migrations by running <code>python manage.py migrate</code></li><li>Collect static files from multiple apps into a single path by running <code>python manage.py collectstatic</code></li><li>Restart supervisor service by running <code>sudo supervisorctl restart myproject_server</code></li></ol><p>These steps are only applicable if you have changes in your Django application. If you have changes in your supervisor configuration, you should run <code>sudo supervisorctl reread</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article, we’ve set up a basic Django project in a virtual environment. We’ve configured Gunicorn/uWSGI to translate client requests so that Django can handle them. Afterwards, we set up Nginx to act as a reverse proxy to handle client connections and serve the correct project depending on the client request. We used supervisor in order to run service for our application server. Similar services can be written for other processes like celery worker or celery beat. The whole process can be automated using fabric script.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Django-Deployment </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> uWSGI </tag>
            
            <tag> Supervisor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Understanding Context Managers in Python</title>
      <link href="/2018/06/18/Understanding-Context-Managers-in-Python/"/>
      <url>/2018/06/18/Understanding-Context-Managers-in-Python/</url>
      <content type="html"><![CDATA[<p>Python context managers provides a way to perform some pre processing and post processing related to your cast. This processing can be allocation and releasing of some kind of resources or any other custom task. Context managers are used using Python <code>with</code> statement. This is in below example.<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> something_that_returns_a_context_manager() <span class="hljs-keyword">as</span> resource:</span><br><span class="line">    foo(resource)</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'done using resource'</span></span><br></pre></td></tr></table></figure></p><p>The most common use of context managers is Resource Management.</p><a id="more"></a><h2 id="Uses-of-Context-Managers"><a href="#Uses-of-Context-Managers" class="headerlink" title="Uses of Context Managers"></a>Uses of Context Managers</h2><h3 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h3><p>Resource management, in simple word, can be called managing an organization’s resource in an efficient way when they are needed to increase productivity. In computing, resource management refers to effectively managing resources like RAM, ROM, network sockets, file handlers and power supply etc. We can say that resource management is management of resources and also using them only when they are needed and releasing resources when they have been used.</p><p>Every programming language has its own way of managing resources. In Python, this is done using context managers using <code>with</code> statemente which releases specific resources when execution of specific block of code has been completed. Context manager is actually an object which epitomized or encapsulated these resources. A normal use case of resource management using context manager is a file handling. Normally file handling is done like this.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = open(file_name)</span><br><span class="line"><span class="hljs-comment"># Read or write content of file here.</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>The problem in this approach is that when there is some error in processing of file after it has been opened, file will remain open in memory. This problem can be solved by writing code like this.<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file = open(file_name)</span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># Read or write content of file here.</span></span><br><span class="line"><span class="hljs-keyword">finally</span>:</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure></p><p>In this way, independent of the result (success/error) of code in <code>try</code> block, file will be closed in <code>finally</code> block. This resolve our problem but it require manual release of the resources. Using <code>with</code> statement, this can be done like this.<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> open(file_name) <span class="hljs-keyword">as</span> file:</span><br><span class="line">    <span class="hljs-comment"># Read or write content of file here.</span></span><br></pre></td></tr></table></figure></p><p><code>with</code> statement will allocate resources to block of code executing insite <code>with</code> block and when execution of that block will be complete, it will release all the resources.</p><h3 id="Other-Uses"><a href="#Other-Uses" class="headerlink" title="Other Uses"></a>Other Uses</h3><p>There can be other usefull uses of context managers. These can be used anywhere where some pre and post processing is required for your task. An example is the management of Asynchronous tasks where you want to have record of each tasks you are adding in queue and marking its status (success/error). In pre processing of that task, you will add a record of that task in database and in post processing, you will mark its status.</p><h2 id="How-Context-Manager-works"><a href="#How-Context-Manager-works" class="headerlink" title="How Context Manager works"></a>How Context Manager works</h2><p>Context managers are very easy to understand. The main components of a context manager a two methods.</p><ol><li><code>__enter__()</code></li><li><code>__exit__()</code></li></ol><p>As we know context managers are enabled by <code>with</code> statement. They works by calling <code>__enter__()</code> when the <code>with</code> block is entered. It is like calling <code>__init__()</code> when object is created. It then binds return value to the target of <code>as</code>. The <code>__exit__()</code> function is called when the context is exited. Below it the example of file handling using context managers.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, file_name, method)</span>:</span></span><br><span class="line">        self.file = open(file_name, method)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">"Exception has been handled"</span></span><br><span class="line">        self.file.close()</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> File(<span class="hljs-string">'file.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> file:</span><br><span class="line">    foo(file)</span><br></pre></td></tr></table></figure><h2 id="Writing-a-custom-Context-Manager"><a href="#Writing-a-custom-Context-Manager" class="headerlink" title="Writing a custom Context Manager"></a>Writing a custom Context Manager</h2><p>We can write custom context manager in Python. There are two different way of doing this.</p><ol><li>Context Manager as Class</li><li>Generator as Context Manager</li></ol><h3 id="Context-Manager-as-Class"><a href="#Context-Manager-as-Class" class="headerlink" title="Context Manager as Class"></a>Context Manager as Class</h3><p>In this way, we will write a class with two methods mentioned above i.e. <code>__enter__()</code> and <code>__exit__()</code>. Lets first discuss a scenario for which we want to write a context manager.<br>We want to read or write a file. But our requirement is such that every file should have some text at start and end of file.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileWithHeadingAndEnd</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line"><span class="hljs-keyword">print</span> <span class="hljs-string">'Open'</span></span><br><span class="line">        fo = open(<span class="hljs-string">"foo.txt"</span>, <span class="hljs-string">"wb"</span>)</span><br><span class="line">        fo.write( <span class="hljs-string">"File Heading\n"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> fo</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        fo.write( <span class="hljs-string">'File End\n'</span>);</span><br><span class="line">        fo.close()</span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">'Closed'</span></span><br></pre></td></tr></table></figure><p>Print statements are only for understanding code structure. When you will run this code, print statement will tell you code execution order.  Below is the way to use this context manager. When you will run this, you will see file generated have a line at start and end of it.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> FileWithHeadingAndEnd() <span class="hljs-keyword">as</span> fo:</span><br><span class="line">   <span class="hljs-comment"># Code Block</span></span><br><span class="line">    i = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">10</span>:</span><br><span class="line">        fo.write(<span class="hljs-string">"Line: %s \n"</span> % str(i))</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><h4 id="How-this-code-works"><a href="#How-this-code-works" class="headerlink" title="How this code works?"></a>How this code works?</h4><p>These are the steps which python interpreter will perform when it will find a with statement.</p><ol><li>Python interpreter will store <code>FileWithHeadingAndEnd()</code> object in a temporary variable.</li><li><code>with</code> statement will call <code>__enter__()</code> method of context manager object</li><li><code>__enter__()</code> method will create a file, add heading in it and return it to <code>as</code> path of the context manager.</li><li>Code block under <code>with</code> statement will be executed.</li><li><code>with</code> statement will call <code>__exit__()</code> method of context manager when code block has been executed.</li></ol><h4 id="What-if-error-occur-during-Execution-of-code-block"><a href="#What-if-error-occur-during-Execution-of-code-block" class="headerlink" title="What if error occur during Execution of code block?"></a>What if error occur during Execution of code block?</h4><p>Suppose an error occurs during execution of code block, following would be the steps taken by python interpreter</p><ol><li><code>with</code> statement will catch error</li><li><code>with</code> statement will call <code>__exit__()</code> method of context manager with details of exception.</li><li><code>__exit__()</code> method will close the file, and return <code>None</code> (In Python, if function do not have any return statement, it returns <code>None</code>)</li><li><code>with</code> statement will check return value and if it is not true, it will re raise exception.</li></ol><h3 id="Generator-as-Context-Manager"><a href="#Generator-as-Context-Manager" class="headerlink" title="Generator as Context Manager"></a>Generator as Context Manager</h3><p>In method mentioned above, we created context manager with class having <code>__enter__()</code> and <code>__exit__()</code> functions. In this method, we will use generator function as context manager.<br>This is shown in below example.<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_context</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'  entering'</span></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        fo = open(<span class="hljs-string">"foo2.txt"</span>, <span class="hljs-string">"wb"</span>)</span><br><span class="line">        fo.write(<span class="hljs-string">"File Heading\n"</span>)</span><br><span class="line">        <span class="hljs-keyword">yield</span> fo</span><br><span class="line">    <span class="hljs-keyword">except</span> RuntimeError, err:</span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">'ERROR:'</span>, err</span><br><span class="line">    <span class="hljs-keyword">finally</span>:</span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">'exiting'</span></span><br><span class="line">    fo.write(<span class="hljs-string">'File End\n'</span>);</span><br><span class="line">    fo.close()</span><br></pre></td></tr></table></figure></p><p>We can use this context manager in similar as above.<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> make_context() <span class="hljs-keyword">as</span> fo:</span><br><span class="line">    i = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">10</span>:</span><br><span class="line">        fo.write(<span class="hljs-string">"Line: %s \n"</span> % str(i))</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Many use cases can be found for context manager. A good thing about context manager is that you have no need to remember to release resources. All the management is done by object itself.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Context-Manager </tag>
            
            <tag> Custom-Context-Manager </tag>
            
            <tag> Python-Generators </tag>
            
            <tag> Python-Resource-Management </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Creating Custom Django Filters in Django</title>
      <link href="/2018/06/09/Creating-Custom-Django-Filters-in-Django/"/>
      <url>/2018/06/09/Creating-Custom-Django-Filters-in-Django/</url>
      <content type="html"><![CDATA[<p>In django’s template framework, there is a wide variety of implicit filters which you can use for different purposes in your application. Filters are functions which control any input which is coming from template. For example you can capitalize a string with following syntax.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; string|upper &#125;&#125;</span><br></pre></td></tr></table></figure><p>In above example, upper is the filter which is converting value coming into string into upper case.</p><a id="more"></a><h2 id="Why-Custom-Filters"><a href="#Why-Custom-Filters" class="headerlink" title="Why Custom Filters"></a>Why Custom Filters</h2><p>Sometimes you may end up requiring usefulness that is not fulfilled by Django’s builtin filters. You can amplify the layout motor by characterizing custom filters utilizing Python, and afterward make them accessible to your templates/layouts like this.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load custom_filters %&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-create-custom-filters"><a href="#How-to-create-custom-filters" class="headerlink" title="How to create custom filters"></a>How to create custom filters</h2><p>Filters are defined in similar manner in which we def a function. It can take arguments and will return answer after manipulating arguments. You can also take inputs and return results as html. Custom filter should be in file which will be in the template tags directory.For a module to be a legitimate label library, it should have a template.Library instance, where all the filters are enrolled. In this way, near to the highest point of your module, place the accompanying:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br></pre></td></tr></table></figure><h2 id="Registering-custom-filters"><a href="#Registering-custom-filters" class="headerlink" title="Registering custom filters"></a>Registering custom filters</h2><p>When you’ve composed your filter definition, you have to enlist it with Library instance of yours, to make it accessible to Django’s template language:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register.filter(<span class="hljs-string">'filtername'</span>, filtername)</span><br></pre></td></tr></table></figure><p>You can register filter also as decorator like this<br>        Example<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@register.filter(name='filtername')</span></span><br></pre></td></tr></table></figure></p><p>This line should be written just before the filter definition.</p><h2 id="Giving-arguments-to-custom-filter-function"><a href="#Giving-arguments-to-custom-filter-function" class="headerlink" title="Giving arguments to custom filter function"></a>Giving arguments to custom filter function</h2><p>Custom filters are used in same manner as we use built in filters like this.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; string|custom_filter&#125;&#125;</span><br></pre></td></tr></table></figure><p>Where custom_filter is name of filter. The filter will have one argument and value of string will be passed to that argument. You can pass maximum of two arguments to a custom filter. Syntax is like this<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; string|custom_filter: second_argument&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>Where string is first argument.<br>More than two arguments are not supported in Django template language. You can use this approach if you want to pass a hard coded string to your filter.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; string|custom_filter: “ ‘second_argument’, ‘third_argument’ “&#125;&#125;</span><br></pre></td></tr></table></figure><p>Then you can split string in you filter to perform your task. You can send more than one arguments by preprocessing data in view and putting it in a dictionary or you have to use custom tags.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose you are required to make a filter which will return required value in a dictionary.<br>Here are steps to do this<br>Now create a directory templatetags  in the same level at which models.py and views.py are and create <code>__init__.py</code> in that directory. In this way this directory will be treated as python  package. Now create a file custom_filters.py in that directory.<br>Write following code in custom_filters.py.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Custom-Filters </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scenario based tests in Jasmine.js</title>
      <link href="/2018/04/09/Scenario-based-tests-in-Jasmine-js/"/>
      <url>/2018/04/09/Scenario-based-tests-in-Jasmine-js/</url>
      <content type="html"><![CDATA[<p>Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. This guide is running against Jasmine version 2.4.1.</p><p>That was brief introduction of jasmine which you can also get on their website. Writing test in jasmine is not very difficult. Every test suite start with a function called ‘describe’ which takes two input.</p><a id="more"></a><ol><li>A string which is description of test case.</li><li>A function is method or block of code which implements suite.</li></ol><p>Second block of test is <code>it</code> block. <code>it</code> take same inputs as <code>describe</code>, a string and a function. A simple jasmine test is shown below.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;Check Addition Result&apos;, function () &#123;</span><br><span class="line">    it(&apos;adds two numbers together&apos;, function () &#123;</span><br><span class="line">        expect(1 + 5).toEqual(6);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Here arguments of <code>expect</code> will be output of function to be tested, and <code>toEqual</code> will have expected result as argument.</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Download latest standalone release from <a href="https://github.com/jasmine/jasmine/releases" target="_blank" rel="noopener">standalone download page</a> of Jasmine. This will look like this</p><p><img src="/content/images/2018/6/capture2.png" alt="Jasmine.js"></p><p>Open <code>SpecRunner</code> in browser and you will look something like this.</p><p><img src="/content/images/2018/6/capture3.png" alt="SpecRunner"></p><p>Now add following function in <code>src/Player.js</code> file.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evenOrOdd</span>(<span class="hljs-params">input</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isNaN</span>(input))&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(input)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we will add tests for this function. Add following code in <code>spec/PlayerSpec.js</code>.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="hljs-string">'Function: evenOrOdd()'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">it(<span class="hljs-string">'Input is an even number'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> result = evenOrOdd(<span class="hljs-number">4</span>);</span><br><span class="line">expect(result).toBe(<span class="hljs-literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line">it(<span class="hljs-string">'Input is a string'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> result = evenOrOdd(<span class="hljs-string">'string'</span>);</span><br><span class="line">expect(result).toBe(<span class="hljs-number">-1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">it(<span class="hljs-string">'Input is a number in string'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> result = evenOrOdd(<span class="hljs-string">'4'</span>);</span><br><span class="line">expect(result).toBe(<span class="hljs-literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line">it(<span class="hljs-string">'Input is an odd number'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> result = evenOrOdd(<span class="hljs-number">5</span>);</span><br><span class="line">expect(result).toBe(<span class="hljs-literal">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>You will see result of your new tests like this when you will open <code>SpecRunner.html</code> in browser.</p><p><img src="/content/images/2018/6/capture3.png" alt="Output"></p><p>You can see that we have to repeat same <code>it</code> block again and again. The only thing which is changing is description of test, input of function and expected output of function. Here we can use scenarios to avoid repetition of code.</p><h2 id="Scenarios-In-Jasmine-tests"><a href="#Scenarios-In-Jasmine-tests" class="headerlink" title="Scenarios In Jasmine tests"></a>Scenarios In Jasmine tests</h2><p>Write your scenarios like this</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> scenarios = [&#123;</span><br><span class="line">        description: <span class="hljs-string">'Input is an even number'</span>,</span><br><span class="line">        input: <span class="hljs-number">4</span>,</span><br><span class="line">        expected_output: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="hljs-string">'Input is a string'</span>,</span><br><span class="line">        input: <span class="hljs-string">'string'</span>,</span><br><span class="line">        expected_output: <span class="hljs-number">-1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="hljs-string">'Input is a number in string'</span>,</span><br><span class="line">        input: <span class="hljs-string">'4'</span>,</span><br><span class="line">        expected_output: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="hljs-string">'Input is an odd number'</span>,</span><br><span class="line">        input: <span class="hljs-number">5</span>,</span><br><span class="line">        expected_output: <span class="hljs-literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>You can see that we just make a separate object for every test case and write all required data for a test in it. Now change your test like this</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scenarios.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="line">it(value.description, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> result = evenOrOdd(value.input);</span><br><span class="line">    expect(result).toBe(value.expected_output);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now when you will run your tests, you will see same output as before. This is how we can use scenarios to avoid repetition of code in our tests.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You can do a lot more with Jasmine like function related-matchers, spies and many more things.You can check detailed documentation from here. Jasmine can be used to test JavaScript code in you Django, Flask or Ruby project.</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jasmine.js </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript-Testing </tag>
            
            <tag> JavaScript-Unittest </tag>
            
            <tag> Scenario-Based-Tests </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Using FFmpeg to create video thumbnails in Python</title>
      <link href="/2018/02/09/Using-FFmpeg-to-create-video-thumbnails-in-Python/"/>
      <url>/2018/02/09/Using-FFmpeg-to-create-video-thumbnails-in-Python/</url>
      <content type="html"><![CDATA[<p>FFmpeg is A complete, cross-platform solution to record, convert and stream audio and video. You can download it from here and install it by following this link for your platform. Detailed documentation of FFmpeg can be seen here. In this post, I will discuss how to user FFmpeg with Python.</p><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>On Ubuntu, you can install by running following command</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure><h3 id="Windows-Mac"><a href="#Windows-Mac" class="headerlink" title="Windows/Mac"></a>Windows/Mac</h3><p>You can download and install you OS specific binaries from <a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">link</a>.</p><h2 id="Creating-Thumbnail"><a href="#Creating-Thumbnail" class="headerlink" title="Creating Thumbnail"></a>Creating Thumbnail</h2><p>Python have a wrapper for FFmpeg called FFmpy. You can see its documentation here. You can install it by running following command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ffmpy</span><br></pre></td></tr></table></figure><p>The command to use FFmpeg to create thumbnail of a video is below</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:04 -vframes 1 output.png</span><br></pre></td></tr></table></figure><ol><li>input.mp4 is input video</li><li>00:00:04 is the position of thumbnail in video</li><li>-vframes 1 shows number of frames you want to get</li><li>output.png is the output image at provided position</li></ol><p>This command can be converted into python by following code.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> ffmpy <span class="hljs-keyword">import</span> FFmpeg</span><br><span class="line"></span><br><span class="line">ff = FFmpeg(inputs=&#123;<span class="hljs-string">'input.mp4'</span>: <span class="hljs-keyword">None</span>&#125;, outputs=&#123;<span class="hljs-string">"output.png"</span>: [<span class="hljs-string">'-ss'</span>, <span class="hljs-string">'00:00:4'</span>, <span class="hljs-string">'-vframes'</span>, <span class="hljs-string">'1'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">print</span> ff.cmd</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Print result</span></span><br><span class="line"><span class="hljs-comment"># ffmpeg -i input.mp4 -ss 00:00:10 -vframes 1 output.png</span></span><br><span class="line"></span><br><span class="line">ff.run()</span><br></pre></td></tr></table></figure><p>In the above command, one frame was created. If you want to get multiple frames, you can use following command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf fps=1 out%d.png</span><br></pre></td></tr></table></figure><ol><li>-vf fps=1 mean create frame after one minute</li></ol><p>This will be done in python like this</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> ffmpy <span class="hljs-keyword">import</span> FFmpeg</span><br><span class="line"></span><br><span class="line">ff = FFmpeg(inputs=&#123;<span class="hljs-string">'input.mp4'</span>: <span class="hljs-keyword">None</span>&#125;, outputs=&#123;<span class="hljs-string">"out%d.png"</span>: [<span class="hljs-string">'-vf'</span>, <span class="hljs-string">'fps=1'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">print</span> ff.cmd</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Print result</span></span><br><span class="line"><span class="hljs-comment">#ffmpeg -i input.mp4 -vf fps=1 out%d.png</span></span><br><span class="line"></span><br><span class="line">ff.run()</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>With above mentioned way of extracting video thumbnail using FFmpeg with python wrapper, we can run many more commands.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> Thumbnail </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to convert HTML to PDF preserving CSS</title>
      <link href="/2018/01/09/How-to-convert-HTML-to-PDF-preserving-CSS/"/>
      <url>/2018/01/09/How-to-convert-HTML-to-PDF-preserving-CSS/</url>
      <content type="html"><![CDATA[<p>Converting a web page into PDF becomes very difficult when you want to preserve CSS of your page. There are two ways of performing this task.</p><ol><li>Client Side</li><li>Server Side</li></ol><p>The solutions which work on client side are JavaScript libraries like jsPDF but they do not impress the user. The server side solutions are mostly APIs but most of them are not free. There is one solution for this problem which is Apache FOP. Apache FOP is actually a free tool which work on server side which convert HTML/XML into PDF and provides lot of formatting for PDF . In this article, I will show you how to create PDF using FOP.</p><a id="more"></a><h2 id="What-is-Apache-FOP"><a href="#What-is-Apache-FOP" class="headerlink" title="What is Apache FOP?"></a>What is Apache FOP?</h2><p>Formatting Objects Processor abbreviated as FOP is a Java application that changes over XSL Formatting Objects (XSL-FO) documents to PDF or other printable arrangements. Its latest available version is 1.1.</p><h2 id="Running-FOP"><a href="#Running-FOP" class="headerlink" title="Running FOP"></a>Running FOP</h2><p>Download FOP from following <a href="https://xmlgraphics.apache.org/fop/download.html" target="_blank" rel="noopener">link</a>.</p><p>Extract fop in some folder. You can run fop by running following command</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./path_to_fop_directory/fop</span><br></pre></td></tr></table></figure><p>When you have successfully run fop, download following rar file from <a href="https://drive.google.com/file/d/0ByZCIms9QOkgUUp0YkNQS0N1WFU/view" target="_blank" rel="noopener">link</a>.There are two files and an image folder in rar file. I am writing them in list below.</p><p>⋅⋅<em> Index.html<br>⋅⋅</em> Index.xsl</p><p>The index.html is the HTML page which will be converted into PDF. Index.xsl is the style sheet for this HTML page. Enter in directory in which you have downloaded these two file through command line and run following command.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fop –xml index.html –xsl index.xsl –pdf index.pdf</span><br></pre></td></tr></table></figure><p>In this command, you are running FOP and giving it two arguments which are xml file (index.html) and xsl file (index.xsl) and telling it that convert HTML file into PDF (index.pdf). Your output will be like this with no footers and headers.</p><p><img src="/content/images/2018/6/im.png" alt="Output 1"></p><p>Now open xsl file and start understanding it. Every section there have comments telling its purpose but I will explain some sections.</p><h2 id="Header-and-Footer-Section"><a href="#Header-and-Footer-Section" class="headerlink" title="Header and Footer Section"></a>Header and Footer Section</h2><p>Look at the section below in xsl file. This section is for setting header and footer of your PDF. Now edit xsl as shown in below section.</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">fo:static-content</span> <span class="hljs-attr">flow-name</span>=<span class="hljs-string">"rb-page"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">font-size</span>=<span class="hljs-string">"10pt"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">fo:table</span> <span class="hljs-attr">table-layout</span>=<span class="hljs-string">"fixed"</span> <span class="hljs-attr">inline-progression-dimension</span>=<span class="hljs-string">"100%"</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-column</span> <span class="hljs-attr">column-width</span>=<span class="hljs-string">"50%"</span>/&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-column</span> <span class="hljs-attr">column-width</span>=<span class="hljs-string">"50%"</span>/&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-body</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-row</span>&gt;</span></span><br><span class="line">                  <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-cell</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">text-align</span>=<span class="hljs-string">"start"</span>&gt;</span></span><br><span class="line">                          Test Pdf file Generated by FOP</span><br><span class="line">                    fo:block&gt;</span><br><span class="line">                  fo:table-cell&gt;</span><br><span class="line">                  <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-cell</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">text-align</span>=<span class="hljs-string">"end"</span> <span class="hljs-attr">font-weight</span>=<span class="hljs-string">"bold"</span></span></span><br><span class="line"><span class="hljs-tag">                      <span class="hljs-attr">font-family</span>=<span class="hljs-string">"monospace"</span>&gt;</span></span><br><span class="line">                          M Hassan Siddiqui</span><br><span class="line">                    fo:block&gt;</span><br><span class="line">                  fo:table-cell&gt;</span><br><span class="line">                fo:table-row&gt;</span><br><span class="line">              fo:table-body&gt;</span><br><span class="line">            fo:table&gt;</span><br><span class="line">          fo:block&gt;</span><br><span class="line">        fo:static-content&gt;</span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">fo:static-content</span> <span class="hljs-attr">flow-name</span>=<span class="hljs-string">"ra-page"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">font-size</span>=<span class="hljs-string">"10pt"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">fo:table</span> <span class="hljs-attr">table-layout</span>=<span class="hljs-string">"fixed"</span> <span class="hljs-attr">inline-progression-dimension</span>=<span class="hljs-string">"100%"</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-column</span> <span class="hljs-attr">column-width</span>=<span class="hljs-string">"50%"</span>/&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-column</span> <span class="hljs-attr">column-width</span>=<span class="hljs-string">"50%"</span>/&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-body</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-row</span>&gt;</span></span><br><span class="line">                  <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-cell</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">text-align</span>=<span class="hljs-string">"start"</span>&gt;</span></span><br><span class="line">                            Footer Text</span><br><span class="line">                    fo:block&gt;</span><br><span class="line">                  fo:table-cell&gt;</span><br><span class="line">                  <span class="hljs-tag">&lt;<span class="hljs-name">fo:table-cell</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">text-align</span>=<span class="hljs-string">"end"</span>&gt;</span>Page</span><br><span class="line">                       of</span><br><span class="line"></span><br><span class="line">                    fo:block&gt;</span><br><span class="line">                  fo:table-cell&gt;</span><br><span class="line">                fo:table-row&gt;</span><br><span class="line">              fo:table-body&gt;</span><br><span class="line">            fo:table&gt;</span><br><span class="line">          fo:block&gt;</span><br><span class="line"> fo:static-content&gt;</span><br></pre></td></tr></table></figure><p>Now run the above command to generate PDF and you will see following header and footer in PDF. If your PDF file is open while running this command, it will give error in Windows but will work fine in Ubuntu. In Windows, close that file and run command.</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p><img src="/content/images/2018/6/im2.png" alt="Header"></p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p><img src="/content/images/2018/6/im3.png" alt="Footer"></p><p>You can also choose an image as footer or header. Put following line in place of ‘Footer Text’.</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">fo:external-graphic</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200pt"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200pt"</span> <span class="hljs-attr">content-width</span>=<span class="hljs-string">"150pt"</span> <span class="hljs-attr">content-height</span>=<span class="hljs-string">"150pt"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/fop.jpg"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/content/images/2018/6/im4.png" alt="Header"></p><h2 id="Styling-for-a-specific-element"><a href="#Styling-for-a-specific-element" class="headerlink" title="Styling for a specific element"></a>Styling for a specific element</h2><p>In xsl file, there are defined behavior for all tags which will we used in your HTML. For example, following section is defining tag.</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">"b"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">font-weight</span>=<span class="hljs-string">"bold"</span> &gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:choose</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">xsl:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"@id"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"@id"</span>/&gt;</span></span><br><span class="line">          xsl:when&gt;</span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">xsl:otherwise</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"generate-id()"</span>/&gt;</span></span><br><span class="line">          xsl:otherwise&gt;</span><br><span class="line">        xsl:choose&gt;</span><br><span class="line">      xsl:attribute&gt;</span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">xsl:apply-templates</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"*|text()"</span>/&gt;</span></span><br><span class="line">    fo:block&gt;</span><br><span class="line">  xsl:template&gt;</span><br></pre></td></tr></table></figure><p>If you want to give it some other style like color, you have to include following line</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">"b"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">font-weight</span>=<span class="hljs-string">"bold"</span> <span class="hljs-attr">xsl:use-attribute-sets</span>=<span class="hljs-string">"boldTextStyles"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:choose</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">xsl:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"@id"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"@id"</span>/&gt;</span></span><br><span class="line">          xsl:when&gt;</span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">xsl:otherwise</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"generate-id()"</span>/&gt;</span></span><br><span class="line">          xsl:otherwise&gt;</span><br><span class="line">        xsl:choose&gt;</span><br><span class="line">      xsl:attribute&gt;</span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">xsl:apply-templates</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"*|text()"</span>/&gt;</span></span><br><span class="line">    fo:block&gt;</span><br><span class="line">xsl:template&gt;</span><br></pre></td></tr></table></figure><p>boldTextStyle is like name of id you give to some div. Now write this line at bottom of file but before ‘’.</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute-set</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"boldTextStyles"</span>&gt;</span></span><br><span class="line">             <span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"color"</span>&gt;</span>#FF0000xsl:attribute&gt;</span><br><span class="line">xsl:attribute-set&gt;</span><br></pre></td></tr></table></figure><p>Now when you will generate PDF, you will see color of bold text will be red.</p><p>FOP actually convert xml into PDF.  XML and HTML are same but in HTML, same types of elements are differentiated with each other with the help of their ids. For example if you have two types of bold texts with red and green color, you just give each tag an id and in css, you give them their required color. But when this file will be converted into PDF, fop will give same style to every tag when fop will find a tag in web page, it will find its definition in xsl file and will do whatever that definition says with that section. If you want two bold section having different color, then you just have to write different tags for each section. Like if one type of bold text is red and other is green, you define another tag in xsl like defined in below section and give it style as required. Copy that code before ‘’ and generate PDF. This section is defining another tag having definition same as for but will have different style</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">"bold_green"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">fo:block</span> <span class="hljs-attr">font-weight</span>=<span class="hljs-string">"bold"</span> <span class="hljs-attr">xsl:use-attribute-sets</span>=<span class="hljs-string">"boldGreenTextStyles"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:choose</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">xsl:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"@id"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"@id"</span>/&gt;</span></span><br><span class="line">          xsl:when&gt;</span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">xsl:otherwise</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"generate-id()"</span>/&gt;</span></span><br><span class="line">          xsl:otherwise&gt;</span><br><span class="line">        xsl:choose&gt;</span><br><span class="line">      xsl:attribute&gt;</span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">xsl:apply-templates</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"*|text()"</span>/&gt;</span></span><br><span class="line">    fo:block&gt;</span><br><span class="line">  xsl:template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- ============================================</span></span><br><span class="line"><span class="hljs-comment">    Styling for boldGreenTextStyles</span></span><br><span class="line"><span class="hljs-comment">    =============================================== --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute-set</span> <span class="hljs-attr">name</span>=<span class="hljs-string">" boldGreenTextStyles "</span>&gt;</span></span><br><span class="line">             <span class="hljs-tag">&lt;<span class="hljs-name">xsl:attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"color"</span>&gt;</span>#00FF00xsl:attribute&gt;</span><br><span class="line">xsl:attribute-set&gt;</span><br></pre></td></tr></table></figure><p>Add this line in index.html</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bold_green</span>&gt;</span> This is bold green text <span class="hljs-tag">&lt;/<span class="hljs-name">bold_green</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now output PDF will be like this</p><p><img src="/content/images/2018/6/im5.png" alt="Output 5"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>To use fop and get PDF according to demand, you first have to convert your HTML code into xml which will be used with xsl to generate PDF. You will have to translate all the css into xsl to get exact PDF as you web page look like. When you write an HTML page, if you miss close tags like <code>&lt;/b&gt;</code> or <code>&lt;/p&gt;</code> etc., browser just ignore them and show you the output. That is not the case when you are generating PDF from fop. Fop will give an error when it does not find a closing tag of a tag. Even when you write <code>&lt;br&gt;</code> instead of <code>&lt;br/&gt;</code>, it will give error. So you have to write code very carefully to perform your task.</p>]]></content>
      
      <categories>
          
          <category> HTML to PDF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html-to-PDF </tag>
            
            <tag> Apache-FOP </tag>
            
            <tag> FOP </tag>
            
            <tag> XML </tag>
            
            <tag> XSL </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
